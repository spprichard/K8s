// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: k8s.io/api/autoscaling/v1/generated.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// CrossVersionObjectReference contains enough information to let you identify the referred resource.
struct K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
  var kind: String {
    get {return _kind ?? String()}
    set {_kind = newValue}
  }
  /// Returns true if `kind` has been explicitly set.
  var hasKind: Bool {return self._kind != nil}
  /// Clears the value of `kind`. Subsequent reads from it will return its default value.
  mutating func clearKind() {self._kind = nil}

  /// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  /// API version of the referent
  /// +optional
  var apiVersion: String {
    get {return _apiVersion ?? String()}
    set {_apiVersion = newValue}
  }
  /// Returns true if `apiVersion` has been explicitly set.
  var hasApiVersion: Bool {return self._apiVersion != nil}
  /// Clears the value of `apiVersion`. Subsequent reads from it will return its default value.
  mutating func clearApiVersion() {self._apiVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _kind: String? = nil
  fileprivate var _name: String? = nil
  fileprivate var _apiVersion: String? = nil
}

/// ExternalMetricSource indicates how to scale on a metric not associated with
/// any Kubernetes object (for example length of queue in cloud
/// messaging service, or QPS from loadbalancer running outside of cluster).
struct K8s_Io_Api_Autoscaling_V1_ExternalMetricSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// metricName is the name of the metric in question.
  var metricName: String {
    get {return _storage._metricName ?? String()}
    set {_uniqueStorage()._metricName = newValue}
  }
  /// Returns true if `metricName` has been explicitly set.
  var hasMetricName: Bool {return _storage._metricName != nil}
  /// Clears the value of `metricName`. Subsequent reads from it will return its default value.
  mutating func clearMetricName() {_uniqueStorage()._metricName = nil}

  /// metricSelector is used to identify a specific time series
  /// within a given metric.
  /// +optional
  var metricSelector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector {
    get {return _storage._metricSelector ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector()}
    set {_uniqueStorage()._metricSelector = newValue}
  }
  /// Returns true if `metricSelector` has been explicitly set.
  var hasMetricSelector: Bool {return _storage._metricSelector != nil}
  /// Clears the value of `metricSelector`. Subsequent reads from it will return its default value.
  mutating func clearMetricSelector() {_uniqueStorage()._metricSelector = nil}

  /// targetValue is the target value of the metric (as a quantity).
  /// Mutually exclusive with TargetAverageValue.
  /// +optional
  var targetValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._targetValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._targetValue = newValue}
  }
  /// Returns true if `targetValue` has been explicitly set.
  var hasTargetValue: Bool {return _storage._targetValue != nil}
  /// Clears the value of `targetValue`. Subsequent reads from it will return its default value.
  mutating func clearTargetValue() {_uniqueStorage()._targetValue = nil}

  /// targetAverageValue is the target per-pod value of global metric (as a quantity).
  /// Mutually exclusive with TargetValue.
  /// +optional
  var targetAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._targetAverageValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._targetAverageValue = newValue}
  }
  /// Returns true if `targetAverageValue` has been explicitly set.
  var hasTargetAverageValue: Bool {return _storage._targetAverageValue != nil}
  /// Clears the value of `targetAverageValue`. Subsequent reads from it will return its default value.
  mutating func clearTargetAverageValue() {_uniqueStorage()._targetAverageValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ExternalMetricStatus indicates the current value of a global metric
/// not associated with any Kubernetes object.
struct K8s_Io_Api_Autoscaling_V1_ExternalMetricStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// metricName is the name of a metric used for autoscaling in
  /// metric system.
  var metricName: String {
    get {return _storage._metricName ?? String()}
    set {_uniqueStorage()._metricName = newValue}
  }
  /// Returns true if `metricName` has been explicitly set.
  var hasMetricName: Bool {return _storage._metricName != nil}
  /// Clears the value of `metricName`. Subsequent reads from it will return its default value.
  mutating func clearMetricName() {_uniqueStorage()._metricName = nil}

  /// metricSelector is used to identify a specific time series
  /// within a given metric.
  /// +optional
  var metricSelector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector {
    get {return _storage._metricSelector ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector()}
    set {_uniqueStorage()._metricSelector = newValue}
  }
  /// Returns true if `metricSelector` has been explicitly set.
  var hasMetricSelector: Bool {return _storage._metricSelector != nil}
  /// Clears the value of `metricSelector`. Subsequent reads from it will return its default value.
  mutating func clearMetricSelector() {_uniqueStorage()._metricSelector = nil}

  /// currentValue is the current value of the metric (as a quantity)
  var currentValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._currentValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._currentValue = newValue}
  }
  /// Returns true if `currentValue` has been explicitly set.
  var hasCurrentValue: Bool {return _storage._currentValue != nil}
  /// Clears the value of `currentValue`. Subsequent reads from it will return its default value.
  mutating func clearCurrentValue() {_uniqueStorage()._currentValue = nil}

  /// currentAverageValue is the current value of metric averaged over autoscaled pods.
  /// +optional
  var currentAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._currentAverageValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._currentAverageValue = newValue}
  }
  /// Returns true if `currentAverageValue` has been explicitly set.
  var hasCurrentAverageValue: Bool {return _storage._currentAverageValue != nil}
  /// Clears the value of `currentAverageValue`. Subsequent reads from it will return its default value.
  mutating func clearCurrentAverageValue() {_uniqueStorage()._currentAverageValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// configuration of a horizontal pod autoscaler.
struct K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscaler {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  /// +optional
  var spec: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerSpec {
    get {return _storage._spec ?? K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// current information about the autoscaler.
  /// +optional
  var status: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerStatus {
    get {return _storage._status ?? K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// HorizontalPodAutoscalerCondition describes the state of
/// a HorizontalPodAutoscaler at a certain point.
struct K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerCondition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// type describes the current condition
  var type: String {
    get {return _storage._type ?? String()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_uniqueStorage()._type = nil}

  /// status is the status of the condition (True, False, Unknown)
  var status: String {
    get {return _storage._status ?? String()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  /// lastTransitionTime is the last time the condition transitioned from
  /// one status to another
  /// +optional
  var lastTransitionTime: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Time {
    get {return _storage._lastTransitionTime ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Time()}
    set {_uniqueStorage()._lastTransitionTime = newValue}
  }
  /// Returns true if `lastTransitionTime` has been explicitly set.
  var hasLastTransitionTime: Bool {return _storage._lastTransitionTime != nil}
  /// Clears the value of `lastTransitionTime`. Subsequent reads from it will return its default value.
  mutating func clearLastTransitionTime() {_uniqueStorage()._lastTransitionTime = nil}

  /// reason is the reason for the condition's last transition.
  /// +optional
  var reason: String {
    get {return _storage._reason ?? String()}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {_uniqueStorage()._reason = nil}

  /// message is a human-readable explanation containing details about
  /// the transition
  /// +optional
  var message: String {
    get {return _storage._message ?? String()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// list of horizontal pod autoscaler objects.
struct K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard list metadata.
  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// list of horizontal pod autoscaler objects.
  var items: [K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscaler] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// specification of a horizontal pod autoscaler.
struct K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption
  /// and will set the desired number of pods by using its Scale subresource.
  var scaleTargetRef: K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference {
    get {return _storage._scaleTargetRef ?? K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference()}
    set {_uniqueStorage()._scaleTargetRef = newValue}
  }
  /// Returns true if `scaleTargetRef` has been explicitly set.
  var hasScaleTargetRef: Bool {return _storage._scaleTargetRef != nil}
  /// Clears the value of `scaleTargetRef`. Subsequent reads from it will return its default value.
  mutating func clearScaleTargetRef() {_uniqueStorage()._scaleTargetRef = nil}

  /// minReplicas is the lower limit for the number of replicas to which the autoscaler
  /// can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  /// alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  /// metric is configured.  Scaling is active as long as at least one metric value is
  /// available.
  /// +optional
  var minReplicas: Int32 {
    get {return _storage._minReplicas ?? 0}
    set {_uniqueStorage()._minReplicas = newValue}
  }
  /// Returns true if `minReplicas` has been explicitly set.
  var hasMinReplicas: Bool {return _storage._minReplicas != nil}
  /// Clears the value of `minReplicas`. Subsequent reads from it will return its default value.
  mutating func clearMinReplicas() {_uniqueStorage()._minReplicas = nil}

  /// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
  var maxReplicas: Int32 {
    get {return _storage._maxReplicas ?? 0}
    set {_uniqueStorage()._maxReplicas = newValue}
  }
  /// Returns true if `maxReplicas` has been explicitly set.
  var hasMaxReplicas: Bool {return _storage._maxReplicas != nil}
  /// Clears the value of `maxReplicas`. Subsequent reads from it will return its default value.
  mutating func clearMaxReplicas() {_uniqueStorage()._maxReplicas = nil}

  /// target average CPU utilization (represented as a percentage of requested CPU) over all the pods;
  /// if not specified the default autoscaling policy will be used.
  /// +optional
  var targetCpuutilizationPercentage: Int32 {
    get {return _storage._targetCpuutilizationPercentage ?? 0}
    set {_uniqueStorage()._targetCpuutilizationPercentage = newValue}
  }
  /// Returns true if `targetCpuutilizationPercentage` has been explicitly set.
  var hasTargetCpuutilizationPercentage: Bool {return _storage._targetCpuutilizationPercentage != nil}
  /// Clears the value of `targetCpuutilizationPercentage`. Subsequent reads from it will return its default value.
  mutating func clearTargetCpuutilizationPercentage() {_uniqueStorage()._targetCpuutilizationPercentage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// current status of a horizontal pod autoscaler
struct K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// most recent generation observed by this autoscaler.
  /// +optional
  var observedGeneration: Int64 {
    get {return _storage._observedGeneration ?? 0}
    set {_uniqueStorage()._observedGeneration = newValue}
  }
  /// Returns true if `observedGeneration` has been explicitly set.
  var hasObservedGeneration: Bool {return _storage._observedGeneration != nil}
  /// Clears the value of `observedGeneration`. Subsequent reads from it will return its default value.
  mutating func clearObservedGeneration() {_uniqueStorage()._observedGeneration = nil}

  /// last time the HorizontalPodAutoscaler scaled the number of pods;
  /// used by the autoscaler to control how often the number of pods is changed.
  /// +optional
  var lastScaleTime: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Time {
    get {return _storage._lastScaleTime ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Time()}
    set {_uniqueStorage()._lastScaleTime = newValue}
  }
  /// Returns true if `lastScaleTime` has been explicitly set.
  var hasLastScaleTime: Bool {return _storage._lastScaleTime != nil}
  /// Clears the value of `lastScaleTime`. Subsequent reads from it will return its default value.
  mutating func clearLastScaleTime() {_uniqueStorage()._lastScaleTime = nil}

  /// current number of replicas of pods managed by this autoscaler.
  var currentReplicas: Int32 {
    get {return _storage._currentReplicas ?? 0}
    set {_uniqueStorage()._currentReplicas = newValue}
  }
  /// Returns true if `currentReplicas` has been explicitly set.
  var hasCurrentReplicas: Bool {return _storage._currentReplicas != nil}
  /// Clears the value of `currentReplicas`. Subsequent reads from it will return its default value.
  mutating func clearCurrentReplicas() {_uniqueStorage()._currentReplicas = nil}

  /// desired number of replicas of pods managed by this autoscaler.
  var desiredReplicas: Int32 {
    get {return _storage._desiredReplicas ?? 0}
    set {_uniqueStorage()._desiredReplicas = newValue}
  }
  /// Returns true if `desiredReplicas` has been explicitly set.
  var hasDesiredReplicas: Bool {return _storage._desiredReplicas != nil}
  /// Clears the value of `desiredReplicas`. Subsequent reads from it will return its default value.
  mutating func clearDesiredReplicas() {_uniqueStorage()._desiredReplicas = nil}

  /// current average CPU utilization over all pods, represented as a percentage of requested CPU,
  /// e.g. 70 means that an average pod is using now 70% of its requested CPU.
  /// +optional
  var currentCpuutilizationPercentage: Int32 {
    get {return _storage._currentCpuutilizationPercentage ?? 0}
    set {_uniqueStorage()._currentCpuutilizationPercentage = newValue}
  }
  /// Returns true if `currentCpuutilizationPercentage` has been explicitly set.
  var hasCurrentCpuutilizationPercentage: Bool {return _storage._currentCpuutilizationPercentage != nil}
  /// Clears the value of `currentCpuutilizationPercentage`. Subsequent reads from it will return its default value.
  mutating func clearCurrentCpuutilizationPercentage() {_uniqueStorage()._currentCpuutilizationPercentage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MetricSpec specifies how to scale based on a single metric
/// (only `type` and one other matching field should be set at once).
struct K8s_Io_Api_Autoscaling_V1_MetricSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// type is the type of metric source.  It should be one of "Object",
  /// "Pods" or "Resource", each mapping to a matching field in the object.
  var type: String {
    get {return _storage._type ?? String()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_uniqueStorage()._type = nil}

  /// object refers to a metric describing a single kubernetes object
  /// (for example, hits-per-second on an Ingress object).
  /// +optional
  var object: K8s_Io_Api_Autoscaling_V1_ObjectMetricSource {
    get {return _storage._object ?? K8s_Io_Api_Autoscaling_V1_ObjectMetricSource()}
    set {_uniqueStorage()._object = newValue}
  }
  /// Returns true if `object` has been explicitly set.
  var hasObject: Bool {return _storage._object != nil}
  /// Clears the value of `object`. Subsequent reads from it will return its default value.
  mutating func clearObject() {_uniqueStorage()._object = nil}

  /// pods refers to a metric describing each pod in the current scale target
  /// (for example, transactions-processed-per-second).  The values will be
  /// averaged together before being compared to the target value.
  /// +optional
  var pods: K8s_Io_Api_Autoscaling_V1_PodsMetricSource {
    get {return _storage._pods ?? K8s_Io_Api_Autoscaling_V1_PodsMetricSource()}
    set {_uniqueStorage()._pods = newValue}
  }
  /// Returns true if `pods` has been explicitly set.
  var hasPods: Bool {return _storage._pods != nil}
  /// Clears the value of `pods`. Subsequent reads from it will return its default value.
  mutating func clearPods() {_uniqueStorage()._pods = nil}

  /// resource refers to a resource metric (such as those specified in
  /// requests and limits) known to Kubernetes describing each pod in the
  /// current scale target (e.g. CPU or memory). Such metrics are built in to
  /// Kubernetes, and have special scaling options on top of those available
  /// to normal per-pod metrics using the "pods" source.
  /// +optional
  var resource: K8s_Io_Api_Autoscaling_V1_ResourceMetricSource {
    get {return _storage._resource ?? K8s_Io_Api_Autoscaling_V1_ResourceMetricSource()}
    set {_uniqueStorage()._resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  var hasResource: Bool {return _storage._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  mutating func clearResource() {_uniqueStorage()._resource = nil}

  /// external refers to a global metric that is not associated
  /// with any Kubernetes object. It allows autoscaling based on information
  /// coming from components running outside of cluster
  /// (for example length of queue in cloud messaging service, or
  /// QPS from loadbalancer running outside of cluster).
  /// +optional
  var external: K8s_Io_Api_Autoscaling_V1_ExternalMetricSource {
    get {return _storage._external ?? K8s_Io_Api_Autoscaling_V1_ExternalMetricSource()}
    set {_uniqueStorage()._external = newValue}
  }
  /// Returns true if `external` has been explicitly set.
  var hasExternal: Bool {return _storage._external != nil}
  /// Clears the value of `external`. Subsequent reads from it will return its default value.
  mutating func clearExternal() {_uniqueStorage()._external = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MetricStatus describes the last-read state of a single metric.
struct K8s_Io_Api_Autoscaling_V1_MetricStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// type is the type of metric source.  It will be one of "Object",
  /// "Pods" or "Resource", each corresponds to a matching field in the object.
  var type: String {
    get {return _storage._type ?? String()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_uniqueStorage()._type = nil}

  /// object refers to a metric describing a single kubernetes object
  /// (for example, hits-per-second on an Ingress object).
  /// +optional
  var object: K8s_Io_Api_Autoscaling_V1_ObjectMetricStatus {
    get {return _storage._object ?? K8s_Io_Api_Autoscaling_V1_ObjectMetricStatus()}
    set {_uniqueStorage()._object = newValue}
  }
  /// Returns true if `object` has been explicitly set.
  var hasObject: Bool {return _storage._object != nil}
  /// Clears the value of `object`. Subsequent reads from it will return its default value.
  mutating func clearObject() {_uniqueStorage()._object = nil}

  /// pods refers to a metric describing each pod in the current scale target
  /// (for example, transactions-processed-per-second).  The values will be
  /// averaged together before being compared to the target value.
  /// +optional
  var pods: K8s_Io_Api_Autoscaling_V1_PodsMetricStatus {
    get {return _storage._pods ?? K8s_Io_Api_Autoscaling_V1_PodsMetricStatus()}
    set {_uniqueStorage()._pods = newValue}
  }
  /// Returns true if `pods` has been explicitly set.
  var hasPods: Bool {return _storage._pods != nil}
  /// Clears the value of `pods`. Subsequent reads from it will return its default value.
  mutating func clearPods() {_uniqueStorage()._pods = nil}

  /// resource refers to a resource metric (such as those specified in
  /// requests and limits) known to Kubernetes describing each pod in the
  /// current scale target (e.g. CPU or memory). Such metrics are built in to
  /// Kubernetes, and have special scaling options on top of those available
  /// to normal per-pod metrics using the "pods" source.
  /// +optional
  var resource: K8s_Io_Api_Autoscaling_V1_ResourceMetricStatus {
    get {return _storage._resource ?? K8s_Io_Api_Autoscaling_V1_ResourceMetricStatus()}
    set {_uniqueStorage()._resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  var hasResource: Bool {return _storage._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  mutating func clearResource() {_uniqueStorage()._resource = nil}

  /// external refers to a global metric that is not associated
  /// with any Kubernetes object. It allows autoscaling based on information
  /// coming from components running outside of cluster
  /// (for example length of queue in cloud messaging service, or
  /// QPS from loadbalancer running outside of cluster).
  /// +optional
  var external: K8s_Io_Api_Autoscaling_V1_ExternalMetricStatus {
    get {return _storage._external ?? K8s_Io_Api_Autoscaling_V1_ExternalMetricStatus()}
    set {_uniqueStorage()._external = newValue}
  }
  /// Returns true if `external` has been explicitly set.
  var hasExternal: Bool {return _storage._external != nil}
  /// Clears the value of `external`. Subsequent reads from it will return its default value.
  mutating func clearExternal() {_uniqueStorage()._external = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ObjectMetricSource indicates how to scale on a metric describing a
/// kubernetes object (for example, hits-per-second on an Ingress object).
struct K8s_Io_Api_Autoscaling_V1_ObjectMetricSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// target is the described Kubernetes object.
  var target: K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference {
    get {return _storage._target ?? K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  mutating func clearTarget() {_uniqueStorage()._target = nil}

  /// metricName is the name of the metric in question.
  var metricName: String {
    get {return _storage._metricName ?? String()}
    set {_uniqueStorage()._metricName = newValue}
  }
  /// Returns true if `metricName` has been explicitly set.
  var hasMetricName: Bool {return _storage._metricName != nil}
  /// Clears the value of `metricName`. Subsequent reads from it will return its default value.
  mutating func clearMetricName() {_uniqueStorage()._metricName = nil}

  /// targetValue is the target value of the metric (as a quantity).
  var targetValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._targetValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._targetValue = newValue}
  }
  /// Returns true if `targetValue` has been explicitly set.
  var hasTargetValue: Bool {return _storage._targetValue != nil}
  /// Clears the value of `targetValue`. Subsequent reads from it will return its default value.
  mutating func clearTargetValue() {_uniqueStorage()._targetValue = nil}

  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric.
  /// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping
  /// When unset, just the metricName will be used to gather metrics.
  /// +optional
  var selector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector {
    get {return _storage._selector ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector()}
    set {_uniqueStorage()._selector = newValue}
  }
  /// Returns true if `selector` has been explicitly set.
  var hasSelector: Bool {return _storage._selector != nil}
  /// Clears the value of `selector`. Subsequent reads from it will return its default value.
  mutating func clearSelector() {_uniqueStorage()._selector = nil}

  /// averageValue is the target value of the average of the
  /// metric across all relevant pods (as a quantity)
  /// +optional
  var averageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._averageValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._averageValue = newValue}
  }
  /// Returns true if `averageValue` has been explicitly set.
  var hasAverageValue: Bool {return _storage._averageValue != nil}
  /// Clears the value of `averageValue`. Subsequent reads from it will return its default value.
  mutating func clearAverageValue() {_uniqueStorage()._averageValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ObjectMetricStatus indicates the current value of a metric describing a
/// kubernetes object (for example, hits-per-second on an Ingress object).
struct K8s_Io_Api_Autoscaling_V1_ObjectMetricStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// target is the described Kubernetes object.
  var target: K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference {
    get {return _storage._target ?? K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  mutating func clearTarget() {_uniqueStorage()._target = nil}

  /// metricName is the name of the metric in question.
  var metricName: String {
    get {return _storage._metricName ?? String()}
    set {_uniqueStorage()._metricName = newValue}
  }
  /// Returns true if `metricName` has been explicitly set.
  var hasMetricName: Bool {return _storage._metricName != nil}
  /// Clears the value of `metricName`. Subsequent reads from it will return its default value.
  mutating func clearMetricName() {_uniqueStorage()._metricName = nil}

  /// currentValue is the current value of the metric (as a quantity).
  var currentValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._currentValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._currentValue = newValue}
  }
  /// Returns true if `currentValue` has been explicitly set.
  var hasCurrentValue: Bool {return _storage._currentValue != nil}
  /// Clears the value of `currentValue`. Subsequent reads from it will return its default value.
  mutating func clearCurrentValue() {_uniqueStorage()._currentValue = nil}

  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric
  /// When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
  /// When unset, just the metricName will be used to gather metrics.
  /// +optional
  var selector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector {
    get {return _storage._selector ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector()}
    set {_uniqueStorage()._selector = newValue}
  }
  /// Returns true if `selector` has been explicitly set.
  var hasSelector: Bool {return _storage._selector != nil}
  /// Clears the value of `selector`. Subsequent reads from it will return its default value.
  mutating func clearSelector() {_uniqueStorage()._selector = nil}

  /// averageValue is the current value of the average of the
  /// metric across all relevant pods (as a quantity)
  /// +optional
  var averageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._averageValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._averageValue = newValue}
  }
  /// Returns true if `averageValue` has been explicitly set.
  var hasAverageValue: Bool {return _storage._averageValue != nil}
  /// Clears the value of `averageValue`. Subsequent reads from it will return its default value.
  mutating func clearAverageValue() {_uniqueStorage()._averageValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// PodsMetricSource indicates how to scale on a metric describing each pod in
/// the current scale target (for example, transactions-processed-per-second).
/// The values will be averaged together before being compared to the target
/// value.
struct K8s_Io_Api_Autoscaling_V1_PodsMetricSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// metricName is the name of the metric in question
  var metricName: String {
    get {return _storage._metricName ?? String()}
    set {_uniqueStorage()._metricName = newValue}
  }
  /// Returns true if `metricName` has been explicitly set.
  var hasMetricName: Bool {return _storage._metricName != nil}
  /// Clears the value of `metricName`. Subsequent reads from it will return its default value.
  mutating func clearMetricName() {_uniqueStorage()._metricName = nil}

  /// targetAverageValue is the target value of the average of the
  /// metric across all relevant pods (as a quantity)
  var targetAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._targetAverageValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._targetAverageValue = newValue}
  }
  /// Returns true if `targetAverageValue` has been explicitly set.
  var hasTargetAverageValue: Bool {return _storage._targetAverageValue != nil}
  /// Clears the value of `targetAverageValue`. Subsequent reads from it will return its default value.
  mutating func clearTargetAverageValue() {_uniqueStorage()._targetAverageValue = nil}

  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric
  /// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping
  /// When unset, just the metricName will be used to gather metrics.
  /// +optional
  var selector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector {
    get {return _storage._selector ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector()}
    set {_uniqueStorage()._selector = newValue}
  }
  /// Returns true if `selector` has been explicitly set.
  var hasSelector: Bool {return _storage._selector != nil}
  /// Clears the value of `selector`. Subsequent reads from it will return its default value.
  mutating func clearSelector() {_uniqueStorage()._selector = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// PodsMetricStatus indicates the current value of a metric describing each pod in
/// the current scale target (for example, transactions-processed-per-second).
struct K8s_Io_Api_Autoscaling_V1_PodsMetricStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// metricName is the name of the metric in question
  var metricName: String {
    get {return _storage._metricName ?? String()}
    set {_uniqueStorage()._metricName = newValue}
  }
  /// Returns true if `metricName` has been explicitly set.
  var hasMetricName: Bool {return _storage._metricName != nil}
  /// Clears the value of `metricName`. Subsequent reads from it will return its default value.
  mutating func clearMetricName() {_uniqueStorage()._metricName = nil}

  /// currentAverageValue is the current value of the average of the
  /// metric across all relevant pods (as a quantity)
  var currentAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._currentAverageValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._currentAverageValue = newValue}
  }
  /// Returns true if `currentAverageValue` has been explicitly set.
  var hasCurrentAverageValue: Bool {return _storage._currentAverageValue != nil}
  /// Clears the value of `currentAverageValue`. Subsequent reads from it will return its default value.
  mutating func clearCurrentAverageValue() {_uniqueStorage()._currentAverageValue = nil}

  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric
  /// When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
  /// When unset, just the metricName will be used to gather metrics.
  /// +optional
  var selector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector {
    get {return _storage._selector ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector()}
    set {_uniqueStorage()._selector = newValue}
  }
  /// Returns true if `selector` has been explicitly set.
  var hasSelector: Bool {return _storage._selector != nil}
  /// Clears the value of `selector`. Subsequent reads from it will return its default value.
  mutating func clearSelector() {_uniqueStorage()._selector = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ResourceMetricSource indicates how to scale on a resource metric known to
/// Kubernetes, as specified in requests and limits, describing each pod in the
/// current scale target (e.g. CPU or memory).  The values will be averaged
/// together before being compared to the target.  Such metrics are built in to
/// Kubernetes, and have special scaling options on top of those available to
/// normal per-pod metrics using the "pods" source.  Only one "target" type
/// should be set.
struct K8s_Io_Api_Autoscaling_V1_ResourceMetricSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// name is the name of the resource in question.
  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  /// targetAverageUtilization is the target value of the average of the
  /// resource metric across all relevant pods, represented as a percentage of
  /// the requested value of the resource for the pods.
  /// +optional
  var targetAverageUtilization: Int32 {
    get {return _storage._targetAverageUtilization ?? 0}
    set {_uniqueStorage()._targetAverageUtilization = newValue}
  }
  /// Returns true if `targetAverageUtilization` has been explicitly set.
  var hasTargetAverageUtilization: Bool {return _storage._targetAverageUtilization != nil}
  /// Clears the value of `targetAverageUtilization`. Subsequent reads from it will return its default value.
  mutating func clearTargetAverageUtilization() {_uniqueStorage()._targetAverageUtilization = nil}

  /// targetAverageValue is the target value of the average of the
  /// resource metric across all relevant pods, as a raw value (instead of as
  /// a percentage of the request), similar to the "pods" metric source type.
  /// +optional
  var targetAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._targetAverageValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._targetAverageValue = newValue}
  }
  /// Returns true if `targetAverageValue` has been explicitly set.
  var hasTargetAverageValue: Bool {return _storage._targetAverageValue != nil}
  /// Clears the value of `targetAverageValue`. Subsequent reads from it will return its default value.
  mutating func clearTargetAverageValue() {_uniqueStorage()._targetAverageValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ResourceMetricStatus indicates the current value of a resource metric known to
/// Kubernetes, as specified in requests and limits, describing each pod in the
/// current scale target (e.g. CPU or memory).  Such metrics are built in to
/// Kubernetes, and have special scaling options on top of those available to
/// normal per-pod metrics using the "pods" source.
struct K8s_Io_Api_Autoscaling_V1_ResourceMetricStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// name is the name of the resource in question.
  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  /// currentAverageUtilization is the current value of the average of the
  /// resource metric across all relevant pods, represented as a percentage of
  /// the requested value of the resource for the pods.  It will only be
  /// present if `targetAverageValue` was set in the corresponding metric
  /// specification.
  /// +optional
  var currentAverageUtilization: Int32 {
    get {return _storage._currentAverageUtilization ?? 0}
    set {_uniqueStorage()._currentAverageUtilization = newValue}
  }
  /// Returns true if `currentAverageUtilization` has been explicitly set.
  var hasCurrentAverageUtilization: Bool {return _storage._currentAverageUtilization != nil}
  /// Clears the value of `currentAverageUtilization`. Subsequent reads from it will return its default value.
  mutating func clearCurrentAverageUtilization() {_uniqueStorage()._currentAverageUtilization = nil}

  /// currentAverageValue is the current value of the average of the
  /// resource metric across all relevant pods, as a raw value (instead of as
  /// a percentage of the request), similar to the "pods" metric source type.
  /// It will always be set, regardless of the corresponding metric specification.
  var currentAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity {
    get {return _storage._currentAverageValue ?? K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity()}
    set {_uniqueStorage()._currentAverageValue = newValue}
  }
  /// Returns true if `currentAverageValue` has been explicitly set.
  var hasCurrentAverageValue: Bool {return _storage._currentAverageValue != nil}
  /// Clears the value of `currentAverageValue`. Subsequent reads from it will return its default value.
  mutating func clearCurrentAverageValue() {_uniqueStorage()._currentAverageValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Scale represents a scaling request for a resource.
struct K8s_Io_Api_Autoscaling_V1_Scale {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  /// +optional
  var spec: K8s_Io_Api_Autoscaling_V1_ScaleSpec {
    get {return _storage._spec ?? K8s_Io_Api_Autoscaling_V1_ScaleSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
  /// +optional
  var status: K8s_Io_Api_Autoscaling_V1_ScaleStatus {
    get {return _storage._status ?? K8s_Io_Api_Autoscaling_V1_ScaleStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ScaleSpec describes the attributes of a scale subresource.
struct K8s_Io_Api_Autoscaling_V1_ScaleSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// desired number of instances for the scaled object.
  /// +optional
  var replicas: Int32 {
    get {return _replicas ?? 0}
    set {_replicas = newValue}
  }
  /// Returns true if `replicas` has been explicitly set.
  var hasReplicas: Bool {return self._replicas != nil}
  /// Clears the value of `replicas`. Subsequent reads from it will return its default value.
  mutating func clearReplicas() {self._replicas = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _replicas: Int32? = nil
}

/// ScaleStatus represents the current status of a scale subresource.
struct K8s_Io_Api_Autoscaling_V1_ScaleStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// actual number of observed instances of the scaled object.
  var replicas: Int32 {
    get {return _replicas ?? 0}
    set {_replicas = newValue}
  }
  /// Returns true if `replicas` has been explicitly set.
  var hasReplicas: Bool {return self._replicas != nil}
  /// Clears the value of `replicas`. Subsequent reads from it will return its default value.
  mutating func clearReplicas() {self._replicas = nil}

  /// label query over pods that should match the replicas count. This is same
  /// as the label selector but in the string format to avoid introspection
  /// by clients. The string will be in the same format as the query-param syntax.
  /// More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
  /// +optional
  var selector: String {
    get {return _selector ?? String()}
    set {_selector = newValue}
  }
  /// Returns true if `selector` has been explicitly set.
  var hasSelector: Bool {return self._selector != nil}
  /// Clears the value of `selector`. Subsequent reads from it will return its default value.
  mutating func clearSelector() {self._selector = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _replicas: Int32? = nil
  fileprivate var _selector: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "k8s.io.api.autoscaling.v1"

extension K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CrossVersionObjectReference"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "name"),
    3: .same(proto: "apiVersion"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._kind)
      case 2: try decoder.decodeSingularStringField(value: &self._name)
      case 3: try decoder.decodeSingularStringField(value: &self._apiVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._kind {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._apiVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference, rhs: K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference) -> Bool {
    if lhs._kind != rhs._kind {return false}
    if lhs._name != rhs._name {return false}
    if lhs._apiVersion != rhs._apiVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_ExternalMetricSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExternalMetricSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metricName"),
    2: .same(proto: "metricSelector"),
    3: .same(proto: "targetValue"),
    4: .same(proto: "targetAverageValue"),
  ]

  fileprivate class _StorageClass {
    var _metricName: String? = nil
    var _metricSelector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector? = nil
    var _targetValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil
    var _targetAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metricName = source._metricName
      _metricSelector = source._metricSelector
      _targetValue = source._targetValue
      _targetAverageValue = source._targetAverageValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._metricName)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._metricSelector)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._targetValue)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._targetAverageValue)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metricName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._metricSelector {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._targetValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._targetAverageValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_ExternalMetricSource, rhs: K8s_Io_Api_Autoscaling_V1_ExternalMetricSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metricName != rhs_storage._metricName {return false}
        if _storage._metricSelector != rhs_storage._metricSelector {return false}
        if _storage._targetValue != rhs_storage._targetValue {return false}
        if _storage._targetAverageValue != rhs_storage._targetAverageValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_ExternalMetricStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExternalMetricStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metricName"),
    2: .same(proto: "metricSelector"),
    3: .same(proto: "currentValue"),
    4: .same(proto: "currentAverageValue"),
  ]

  fileprivate class _StorageClass {
    var _metricName: String? = nil
    var _metricSelector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector? = nil
    var _currentValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil
    var _currentAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metricName = source._metricName
      _metricSelector = source._metricSelector
      _currentValue = source._currentValue
      _currentAverageValue = source._currentAverageValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._metricName)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._metricSelector)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._currentValue)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._currentAverageValue)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metricName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._metricSelector {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._currentValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._currentAverageValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_ExternalMetricStatus, rhs: K8s_Io_Api_Autoscaling_V1_ExternalMetricStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metricName != rhs_storage._metricName {return false}
        if _storage._metricSelector != rhs_storage._metricSelector {return false}
        if _storage._currentValue != rhs_storage._currentValue {return false}
        if _storage._currentAverageValue != rhs_storage._currentAverageValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscaler: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HorizontalPodAutoscaler"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "spec"),
    3: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _spec: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerSpec? = nil
    var _status: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._status)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscaler, rhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscaler) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HorizontalPodAutoscalerCondition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "status"),
    3: .same(proto: "lastTransitionTime"),
    4: .same(proto: "reason"),
    5: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _type: String? = nil
    var _status: String? = nil
    var _lastTransitionTime: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Time? = nil
    var _reason: String? = nil
    var _message: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _status = source._status
      _lastTransitionTime = source._lastTransitionTime
      _reason = source._reason
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._status)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._lastTransitionTime)
        case 4: try decoder.decodeSingularStringField(value: &_storage._reason)
        case 5: try decoder.decodeSingularStringField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._status {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._lastTransitionTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._reason {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._message {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerCondition, rhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerCondition) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._lastTransitionTime != rhs_storage._lastTransitionTime {return false}
        if _storage._reason != rhs_storage._reason {return false}
        if _storage._message != rhs_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HorizontalPodAutoscalerList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "items"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta? = nil
    var _items: [K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscaler] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _items = source._items
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._items)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerList, rhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerList) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._items != rhs_storage._items {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HorizontalPodAutoscalerSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scaleTargetRef"),
    2: .same(proto: "minReplicas"),
    3: .same(proto: "maxReplicas"),
    4: .same(proto: "targetCPUUtilizationPercentage"),
  ]

  fileprivate class _StorageClass {
    var _scaleTargetRef: K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference? = nil
    var _minReplicas: Int32? = nil
    var _maxReplicas: Int32? = nil
    var _targetCpuutilizationPercentage: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _scaleTargetRef = source._scaleTargetRef
      _minReplicas = source._minReplicas
      _maxReplicas = source._maxReplicas
      _targetCpuutilizationPercentage = source._targetCpuutilizationPercentage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._scaleTargetRef)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._minReplicas)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._maxReplicas)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._targetCpuutilizationPercentage)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._scaleTargetRef {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._minReplicas {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxReplicas {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._targetCpuutilizationPercentage {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerSpec, rhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._scaleTargetRef != rhs_storage._scaleTargetRef {return false}
        if _storage._minReplicas != rhs_storage._minReplicas {return false}
        if _storage._maxReplicas != rhs_storage._maxReplicas {return false}
        if _storage._targetCpuutilizationPercentage != rhs_storage._targetCpuutilizationPercentage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HorizontalPodAutoscalerStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "observedGeneration"),
    2: .same(proto: "lastScaleTime"),
    3: .same(proto: "currentReplicas"),
    4: .same(proto: "desiredReplicas"),
    5: .same(proto: "currentCPUUtilizationPercentage"),
  ]

  fileprivate class _StorageClass {
    var _observedGeneration: Int64? = nil
    var _lastScaleTime: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Time? = nil
    var _currentReplicas: Int32? = nil
    var _desiredReplicas: Int32? = nil
    var _currentCpuutilizationPercentage: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _observedGeneration = source._observedGeneration
      _lastScaleTime = source._lastScaleTime
      _currentReplicas = source._currentReplicas
      _desiredReplicas = source._desiredReplicas
      _currentCpuutilizationPercentage = source._currentCpuutilizationPercentage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._observedGeneration)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._lastScaleTime)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._currentReplicas)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._desiredReplicas)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._currentCpuutilizationPercentage)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._observedGeneration {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._lastScaleTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._currentReplicas {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._desiredReplicas {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._currentCpuutilizationPercentage {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerStatus, rhs: K8s_Io_Api_Autoscaling_V1_HorizontalPodAutoscalerStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._observedGeneration != rhs_storage._observedGeneration {return false}
        if _storage._lastScaleTime != rhs_storage._lastScaleTime {return false}
        if _storage._currentReplicas != rhs_storage._currentReplicas {return false}
        if _storage._desiredReplicas != rhs_storage._desiredReplicas {return false}
        if _storage._currentCpuutilizationPercentage != rhs_storage._currentCpuutilizationPercentage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_MetricSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MetricSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "object"),
    3: .same(proto: "pods"),
    4: .same(proto: "resource"),
    5: .same(proto: "external"),
  ]

  fileprivate class _StorageClass {
    var _type: String? = nil
    var _object: K8s_Io_Api_Autoscaling_V1_ObjectMetricSource? = nil
    var _pods: K8s_Io_Api_Autoscaling_V1_PodsMetricSource? = nil
    var _resource: K8s_Io_Api_Autoscaling_V1_ResourceMetricSource? = nil
    var _external: K8s_Io_Api_Autoscaling_V1_ExternalMetricSource? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _object = source._object
      _pods = source._pods
      _resource = source._resource
      _external = source._external
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._object)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._pods)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._resource)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._external)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._object {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._pods {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._resource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._external {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_MetricSpec, rhs: K8s_Io_Api_Autoscaling_V1_MetricSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._object != rhs_storage._object {return false}
        if _storage._pods != rhs_storage._pods {return false}
        if _storage._resource != rhs_storage._resource {return false}
        if _storage._external != rhs_storage._external {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_MetricStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MetricStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "object"),
    3: .same(proto: "pods"),
    4: .same(proto: "resource"),
    5: .same(proto: "external"),
  ]

  fileprivate class _StorageClass {
    var _type: String? = nil
    var _object: K8s_Io_Api_Autoscaling_V1_ObjectMetricStatus? = nil
    var _pods: K8s_Io_Api_Autoscaling_V1_PodsMetricStatus? = nil
    var _resource: K8s_Io_Api_Autoscaling_V1_ResourceMetricStatus? = nil
    var _external: K8s_Io_Api_Autoscaling_V1_ExternalMetricStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _object = source._object
      _pods = source._pods
      _resource = source._resource
      _external = source._external
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._object)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._pods)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._resource)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._external)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._object {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._pods {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._resource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._external {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_MetricStatus, rhs: K8s_Io_Api_Autoscaling_V1_MetricStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._object != rhs_storage._object {return false}
        if _storage._pods != rhs_storage._pods {return false}
        if _storage._resource != rhs_storage._resource {return false}
        if _storage._external != rhs_storage._external {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_ObjectMetricSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObjectMetricSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "metricName"),
    3: .same(proto: "targetValue"),
    4: .same(proto: "selector"),
    5: .same(proto: "averageValue"),
  ]

  fileprivate class _StorageClass {
    var _target: K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference? = nil
    var _metricName: String? = nil
    var _targetValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil
    var _selector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector? = nil
    var _averageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _metricName = source._metricName
      _targetValue = source._targetValue
      _selector = source._selector
      _averageValue = source._averageValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 2: try decoder.decodeSingularStringField(value: &_storage._metricName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._targetValue)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._selector)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._averageValue)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._metricName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._targetValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._selector {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._averageValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_ObjectMetricSource, rhs: K8s_Io_Api_Autoscaling_V1_ObjectMetricSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._metricName != rhs_storage._metricName {return false}
        if _storage._targetValue != rhs_storage._targetValue {return false}
        if _storage._selector != rhs_storage._selector {return false}
        if _storage._averageValue != rhs_storage._averageValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_ObjectMetricStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObjectMetricStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "metricName"),
    3: .same(proto: "currentValue"),
    4: .same(proto: "selector"),
    5: .same(proto: "averageValue"),
  ]

  fileprivate class _StorageClass {
    var _target: K8s_Io_Api_Autoscaling_V1_CrossVersionObjectReference? = nil
    var _metricName: String? = nil
    var _currentValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil
    var _selector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector? = nil
    var _averageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _metricName = source._metricName
      _currentValue = source._currentValue
      _selector = source._selector
      _averageValue = source._averageValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 2: try decoder.decodeSingularStringField(value: &_storage._metricName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._currentValue)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._selector)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._averageValue)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._metricName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._currentValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._selector {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._averageValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_ObjectMetricStatus, rhs: K8s_Io_Api_Autoscaling_V1_ObjectMetricStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._metricName != rhs_storage._metricName {return false}
        if _storage._currentValue != rhs_storage._currentValue {return false}
        if _storage._selector != rhs_storage._selector {return false}
        if _storage._averageValue != rhs_storage._averageValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_PodsMetricSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PodsMetricSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metricName"),
    2: .same(proto: "targetAverageValue"),
    3: .same(proto: "selector"),
  ]

  fileprivate class _StorageClass {
    var _metricName: String? = nil
    var _targetAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil
    var _selector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metricName = source._metricName
      _targetAverageValue = source._targetAverageValue
      _selector = source._selector
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._metricName)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetAverageValue)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._selector)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metricName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetAverageValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._selector {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_PodsMetricSource, rhs: K8s_Io_Api_Autoscaling_V1_PodsMetricSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metricName != rhs_storage._metricName {return false}
        if _storage._targetAverageValue != rhs_storage._targetAverageValue {return false}
        if _storage._selector != rhs_storage._selector {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_PodsMetricStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PodsMetricStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metricName"),
    2: .same(proto: "currentAverageValue"),
    3: .same(proto: "selector"),
  ]

  fileprivate class _StorageClass {
    var _metricName: String? = nil
    var _currentAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil
    var _selector: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_LabelSelector? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metricName = source._metricName
      _currentAverageValue = source._currentAverageValue
      _selector = source._selector
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._metricName)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._currentAverageValue)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._selector)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metricName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._currentAverageValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._selector {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_PodsMetricStatus, rhs: K8s_Io_Api_Autoscaling_V1_PodsMetricStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metricName != rhs_storage._metricName {return false}
        if _storage._currentAverageValue != rhs_storage._currentAverageValue {return false}
        if _storage._selector != rhs_storage._selector {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_ResourceMetricSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResourceMetricSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "targetAverageUtilization"),
    3: .same(proto: "targetAverageValue"),
  ]

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _targetAverageUtilization: Int32? = nil
    var _targetAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _targetAverageUtilization = source._targetAverageUtilization
      _targetAverageValue = source._targetAverageValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._targetAverageUtilization)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._targetAverageValue)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetAverageUtilization {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._targetAverageValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_ResourceMetricSource, rhs: K8s_Io_Api_Autoscaling_V1_ResourceMetricSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._targetAverageUtilization != rhs_storage._targetAverageUtilization {return false}
        if _storage._targetAverageValue != rhs_storage._targetAverageValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_ResourceMetricStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResourceMetricStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "currentAverageUtilization"),
    3: .same(proto: "currentAverageValue"),
  ]

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _currentAverageUtilization: Int32? = nil
    var _currentAverageValue: K8s_Io_Apimachinery_Pkg_Api_Resource_Quantity? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _currentAverageUtilization = source._currentAverageUtilization
      _currentAverageValue = source._currentAverageValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._currentAverageUtilization)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._currentAverageValue)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._currentAverageUtilization {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._currentAverageValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_ResourceMetricStatus, rhs: K8s_Io_Api_Autoscaling_V1_ResourceMetricStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._currentAverageUtilization != rhs_storage._currentAverageUtilization {return false}
        if _storage._currentAverageValue != rhs_storage._currentAverageValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_Scale: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Scale"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "spec"),
    3: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _spec: K8s_Io_Api_Autoscaling_V1_ScaleSpec? = nil
    var _status: K8s_Io_Api_Autoscaling_V1_ScaleStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._status)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_Scale, rhs: K8s_Io_Api_Autoscaling_V1_Scale) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_ScaleSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScaleSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "replicas"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._replicas)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._replicas {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_ScaleSpec, rhs: K8s_Io_Api_Autoscaling_V1_ScaleSpec) -> Bool {
    if lhs._replicas != rhs._replicas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Autoscaling_V1_ScaleStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScaleStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "replicas"),
    2: .same(proto: "selector"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._replicas)
      case 2: try decoder.decodeSingularStringField(value: &self._selector)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._replicas {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._selector {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Autoscaling_V1_ScaleStatus, rhs: K8s_Io_Api_Autoscaling_V1_ScaleStatus) -> Bool {
    if lhs._replicas != rhs._replicas {return false}
    if lhs._selector != rhs._selector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
