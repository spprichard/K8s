// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: k8s.io/api/authorization/v1beta1/generated.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ExtraValue masks the value so protobuf can generate
/// +protobuf.nullable=true
/// +protobuf.options.(gogoproto.goproto_stringer)=false
struct K8s_Io_Api_Authorization_V1beta1_ExtraValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace.
/// Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions
/// checking.
struct K8s_Io_Api_Authorization_V1beta1_LocalSubjectAccessReview {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace
  /// you made the request against.  If empty, it is defaulted.
  var spec: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec {
    get {return _storage._spec ?? K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// Status is filled in by the server and indicates whether the request is allowed or not
  /// +optional
  var status: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus {
    get {return _storage._status ?? K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
struct K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Path is the URL path of the request
  /// +optional
  var path: String {
    get {return _path ?? String()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  mutating func clearPath() {self._path = nil}

  /// Verb is the standard HTTP verb
  /// +optional
  var verb: String {
    get {return _verb ?? String()}
    set {_verb = newValue}
  }
  /// Returns true if `verb` has been explicitly set.
  var hasVerb: Bool {return self._verb != nil}
  /// Clears the value of `verb`. Subsequent reads from it will return its default value.
  mutating func clearVerb() {self._verb = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _path: String? = nil
  fileprivate var _verb: String? = nil
}

/// NonResourceRule holds information that describes a rule for the non-resource
struct K8s_Io_Api_Authorization_V1beta1_NonResourceRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
  var verbs: [String] = []

  /// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full,
  /// final step in the path.  "*" means all.
  /// +optional
  var nonResourceUrls: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
struct K8s_Io_Api_Authorization_V1beta1_ResourceAttributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces
  /// "" (empty) is defaulted for LocalSubjectAccessReviews
  /// "" (empty) is empty for cluster-scoped resources
  /// "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
  /// +optional
  var namespace: String {
    get {return _namespace ?? String()}
    set {_namespace = newValue}
  }
  /// Returns true if `namespace` has been explicitly set.
  var hasNamespace: Bool {return self._namespace != nil}
  /// Clears the value of `namespace`. Subsequent reads from it will return its default value.
  mutating func clearNamespace() {self._namespace = nil}

  /// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
  /// +optional
  var verb: String {
    get {return _verb ?? String()}
    set {_verb = newValue}
  }
  /// Returns true if `verb` has been explicitly set.
  var hasVerb: Bool {return self._verb != nil}
  /// Clears the value of `verb`. Subsequent reads from it will return its default value.
  mutating func clearVerb() {self._verb = nil}

  /// Group is the API Group of the Resource.  "*" means all.
  /// +optional
  var group: String {
    get {return _group ?? String()}
    set {_group = newValue}
  }
  /// Returns true if `group` has been explicitly set.
  var hasGroup: Bool {return self._group != nil}
  /// Clears the value of `group`. Subsequent reads from it will return its default value.
  mutating func clearGroup() {self._group = nil}

  /// Version is the API Version of the Resource.  "*" means all.
  /// +optional
  var version: String {
    get {return _version ?? String()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  /// Resource is one of the existing resource types.  "*" means all.
  /// +optional
  var resource: String {
    get {return _resource ?? String()}
    set {_resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  var hasResource: Bool {return self._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  mutating func clearResource() {self._resource = nil}

  /// Subresource is one of the existing resource types.  "" means none.
  /// +optional
  var subresource: String {
    get {return _subresource ?? String()}
    set {_subresource = newValue}
  }
  /// Returns true if `subresource` has been explicitly set.
  var hasSubresource: Bool {return self._subresource != nil}
  /// Clears the value of `subresource`. Subsequent reads from it will return its default value.
  mutating func clearSubresource() {self._subresource = nil}

  /// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
  /// +optional
  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _namespace: String? = nil
  fileprivate var _verb: String? = nil
  fileprivate var _group: String? = nil
  fileprivate var _version: String? = nil
  fileprivate var _resource: String? = nil
  fileprivate var _subresource: String? = nil
  fileprivate var _name: String? = nil
}

/// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant,
/// may contain duplicates, and possibly be incomplete.
struct K8s_Io_Api_Authorization_V1beta1_ResourceRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
  var verbs: [String] = []

  /// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of
  /// the enumerated resources in any API group will be allowed.  "*" means all.
  /// +optional
  var apiGroups: [String] = []

  /// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
  ///  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
  /// +optional
  var resources: [String] = []

  /// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
  /// +optional
  var resourceNames: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a
/// spec.namespace means "in all namespaces".  Self is a special case, because users should always be able
/// to check whether they can perform an action
struct K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReview {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Spec holds information about the request being evaluated.  user and groups must be empty
  var spec: K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReviewSpec {
    get {return _storage._spec ?? K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReviewSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// Status is filled in by the server and indicates whether the request is allowed or not
  /// +optional
  var status: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus {
    get {return _storage._status ?? K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes
/// and NonResourceAuthorizationAttributes must be set
struct K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReviewSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ResourceAuthorizationAttributes describes information for a resource access request
  /// +optional
  var resourceAttributes: K8s_Io_Api_Authorization_V1beta1_ResourceAttributes {
    get {return _storage._resourceAttributes ?? K8s_Io_Api_Authorization_V1beta1_ResourceAttributes()}
    set {_uniqueStorage()._resourceAttributes = newValue}
  }
  /// Returns true if `resourceAttributes` has been explicitly set.
  var hasResourceAttributes: Bool {return _storage._resourceAttributes != nil}
  /// Clears the value of `resourceAttributes`. Subsequent reads from it will return its default value.
  mutating func clearResourceAttributes() {_uniqueStorage()._resourceAttributes = nil}

  /// NonResourceAttributes describes information for a non-resource access request
  /// +optional
  var nonResourceAttributes: K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes {
    get {return _storage._nonResourceAttributes ?? K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes()}
    set {_uniqueStorage()._nonResourceAttributes = newValue}
  }
  /// Returns true if `nonResourceAttributes` has been explicitly set.
  var hasNonResourceAttributes: Bool {return _storage._nonResourceAttributes != nil}
  /// Clears the value of `nonResourceAttributes`. Subsequent reads from it will return its default value.
  mutating func clearNonResourceAttributes() {_uniqueStorage()._nonResourceAttributes = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace.
/// The returned list of actions may be incomplete depending on the server's authorization mode,
/// and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions,
/// or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to
/// drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns.
/// SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
struct K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReview {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Spec holds information about the request being evaluated.
  var spec: K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReviewSpec {
    get {return _storage._spec ?? K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReviewSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// Status is filled in by the server and indicates the set of actions a user can perform.
  /// +optional
  var status: K8s_Io_Api_Authorization_V1beta1_SubjectRulesReviewStatus {
    get {return _storage._status ?? K8s_Io_Api_Authorization_V1beta1_SubjectRulesReviewStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReviewSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Namespace to evaluate rules for. Required.
  var namespace: String {
    get {return _namespace ?? String()}
    set {_namespace = newValue}
  }
  /// Returns true if `namespace` has been explicitly set.
  var hasNamespace: Bool {return self._namespace != nil}
  /// Clears the value of `namespace`. Subsequent reads from it will return its default value.
  mutating func clearNamespace() {self._namespace = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _namespace: String? = nil
}

/// SubjectAccessReview checks whether or not a user or group can perform an action.
struct K8s_Io_Api_Authorization_V1beta1_SubjectAccessReview {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Spec holds information about the request being evaluated
  var spec: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec {
    get {return _storage._spec ?? K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// Status is filled in by the server and indicates whether the request is allowed or not
  /// +optional
  var status: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus {
    get {return _storage._status ?? K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes
/// and NonResourceAuthorizationAttributes must be set
struct K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ResourceAuthorizationAttributes describes information for a resource access request
  /// +optional
  var resourceAttributes: K8s_Io_Api_Authorization_V1beta1_ResourceAttributes {
    get {return _storage._resourceAttributes ?? K8s_Io_Api_Authorization_V1beta1_ResourceAttributes()}
    set {_uniqueStorage()._resourceAttributes = newValue}
  }
  /// Returns true if `resourceAttributes` has been explicitly set.
  var hasResourceAttributes: Bool {return _storage._resourceAttributes != nil}
  /// Clears the value of `resourceAttributes`. Subsequent reads from it will return its default value.
  mutating func clearResourceAttributes() {_uniqueStorage()._resourceAttributes = nil}

  /// NonResourceAttributes describes information for a non-resource access request
  /// +optional
  var nonResourceAttributes: K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes {
    get {return _storage._nonResourceAttributes ?? K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes()}
    set {_uniqueStorage()._nonResourceAttributes = newValue}
  }
  /// Returns true if `nonResourceAttributes` has been explicitly set.
  var hasNonResourceAttributes: Bool {return _storage._nonResourceAttributes != nil}
  /// Clears the value of `nonResourceAttributes`. Subsequent reads from it will return its default value.
  mutating func clearNonResourceAttributes() {_uniqueStorage()._nonResourceAttributes = nil}

  /// User is the user you're testing for.
  /// If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
  /// +optional
  var user: String {
    get {return _storage._user ?? String()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  /// Groups is the groups you're testing for.
  /// +optional
  var group: [String] {
    get {return _storage._group}
    set {_uniqueStorage()._group = newValue}
  }

  /// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer
  /// it needs a reflection here.
  /// +optional
  var extra: Dictionary<String,K8s_Io_Api_Authorization_V1beta1_ExtraValue> {
    get {return _storage._extra}
    set {_uniqueStorage()._extra = newValue}
  }

  /// UID information about the requesting user.
  /// +optional
  var uid: String {
    get {return _storage._uid ?? String()}
    set {_uniqueStorage()._uid = newValue}
  }
  /// Returns true if `uid` has been explicitly set.
  var hasUid: Bool {return _storage._uid != nil}
  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
  mutating func clearUid() {_uniqueStorage()._uid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// SubjectAccessReviewStatus
struct K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Allowed is required. True if the action would be allowed, false otherwise.
  var allowed: Bool {
    get {return _allowed ?? false}
    set {_allowed = newValue}
  }
  /// Returns true if `allowed` has been explicitly set.
  var hasAllowed: Bool {return self._allowed != nil}
  /// Clears the value of `allowed`. Subsequent reads from it will return its default value.
  mutating func clearAllowed() {self._allowed = nil}

  /// Denied is optional. True if the action would be denied, otherwise
  /// false. If both allowed is false and denied is false, then the
  /// authorizer has no opinion on whether to authorize the action. Denied
  /// may not be true if Allowed is true.
  /// +optional
  var denied: Bool {
    get {return _denied ?? false}
    set {_denied = newValue}
  }
  /// Returns true if `denied` has been explicitly set.
  var hasDenied: Bool {return self._denied != nil}
  /// Clears the value of `denied`. Subsequent reads from it will return its default value.
  mutating func clearDenied() {self._denied = nil}

  /// Reason is optional.  It indicates why a request was allowed or denied.
  /// +optional
  var reason: String {
    get {return _reason ?? String()}
    set {_reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return self._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {self._reason = nil}

  /// EvaluationError is an indication that some error occurred during the authorization check.
  /// It is entirely possible to get an error and be able to continue determine authorization status in spite of it.
  /// For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
  /// +optional
  var evaluationError: String {
    get {return _evaluationError ?? String()}
    set {_evaluationError = newValue}
  }
  /// Returns true if `evaluationError` has been explicitly set.
  var hasEvaluationError: Bool {return self._evaluationError != nil}
  /// Clears the value of `evaluationError`. Subsequent reads from it will return its default value.
  mutating func clearEvaluationError() {self._evaluationError = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _allowed: Bool? = nil
  fileprivate var _denied: Bool? = nil
  fileprivate var _reason: String? = nil
  fileprivate var _evaluationError: String? = nil
}

/// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on
/// the set of authorizers the server is configured with and any errors experienced during evaluation.
/// Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission,
/// even if that list is incomplete.
struct K8s_Io_Api_Authorization_V1beta1_SubjectRulesReviewStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ResourceRules is the list of actions the subject is allowed to perform on resources.
  /// The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
  var resourceRules: [K8s_Io_Api_Authorization_V1beta1_ResourceRule] = []

  /// NonResourceRules is the list of actions the subject is allowed to perform on non-resources.
  /// The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
  var nonResourceRules: [K8s_Io_Api_Authorization_V1beta1_NonResourceRule] = []

  /// Incomplete is true when the rules returned by this call are incomplete. This is most commonly
  /// encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
  var incomplete: Bool {
    get {return _incomplete ?? false}
    set {_incomplete = newValue}
  }
  /// Returns true if `incomplete` has been explicitly set.
  var hasIncomplete: Bool {return self._incomplete != nil}
  /// Clears the value of `incomplete`. Subsequent reads from it will return its default value.
  mutating func clearIncomplete() {self._incomplete = nil}

  /// EvaluationError can appear in combination with Rules. It indicates an error occurred during
  /// rule evaluation, such as an authorizer that doesn't support rule evaluation, and that
  /// ResourceRules and/or NonResourceRules may be incomplete.
  /// +optional
  var evaluationError: String {
    get {return _evaluationError ?? String()}
    set {_evaluationError = newValue}
  }
  /// Returns true if `evaluationError` has been explicitly set.
  var hasEvaluationError: Bool {return self._evaluationError != nil}
  /// Clears the value of `evaluationError`. Subsequent reads from it will return its default value.
  mutating func clearEvaluationError() {self._evaluationError = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _incomplete: Bool? = nil
  fileprivate var _evaluationError: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "k8s.io.api.authorization.v1beta1"

extension K8s_Io_Api_Authorization_V1beta1_ExtraValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtraValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedStringField(value: self.items, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_ExtraValue, rhs: K8s_Io_Api_Authorization_V1beta1_ExtraValue) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_LocalSubjectAccessReview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocalSubjectAccessReview"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "spec"),
    3: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _spec: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec? = nil
    var _status: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._status)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_LocalSubjectAccessReview, rhs: K8s_Io_Api_Authorization_V1beta1_LocalSubjectAccessReview) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NonResourceAttributes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "verb"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._path)
      case 2: try decoder.decodeSingularStringField(value: &self._verb)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._path {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._verb {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes, rhs: K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes) -> Bool {
    if lhs._path != rhs._path {return false}
    if lhs._verb != rhs._verb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_NonResourceRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NonResourceRule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "verbs"),
    2: .same(proto: "nonResourceURLs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.verbs)
      case 2: try decoder.decodeRepeatedStringField(value: &self.nonResourceUrls)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.verbs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.verbs, fieldNumber: 1)
    }
    if !self.nonResourceUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nonResourceUrls, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_NonResourceRule, rhs: K8s_Io_Api_Authorization_V1beta1_NonResourceRule) -> Bool {
    if lhs.verbs != rhs.verbs {return false}
    if lhs.nonResourceUrls != rhs.nonResourceUrls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_ResourceAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResourceAttributes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "namespace"),
    2: .same(proto: "verb"),
    3: .same(proto: "group"),
    4: .same(proto: "version"),
    5: .same(proto: "resource"),
    6: .same(proto: "subresource"),
    7: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._namespace)
      case 2: try decoder.decodeSingularStringField(value: &self._verb)
      case 3: try decoder.decodeSingularStringField(value: &self._group)
      case 4: try decoder.decodeSingularStringField(value: &self._version)
      case 5: try decoder.decodeSingularStringField(value: &self._resource)
      case 6: try decoder.decodeSingularStringField(value: &self._subresource)
      case 7: try decoder.decodeSingularStringField(value: &self._name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._namespace {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._verb {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._group {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._resource {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._subresource {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_ResourceAttributes, rhs: K8s_Io_Api_Authorization_V1beta1_ResourceAttributes) -> Bool {
    if lhs._namespace != rhs._namespace {return false}
    if lhs._verb != rhs._verb {return false}
    if lhs._group != rhs._group {return false}
    if lhs._version != rhs._version {return false}
    if lhs._resource != rhs._resource {return false}
    if lhs._subresource != rhs._subresource {return false}
    if lhs._name != rhs._name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_ResourceRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResourceRule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "verbs"),
    2: .same(proto: "apiGroups"),
    3: .same(proto: "resources"),
    4: .same(proto: "resourceNames"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.verbs)
      case 2: try decoder.decodeRepeatedStringField(value: &self.apiGroups)
      case 3: try decoder.decodeRepeatedStringField(value: &self.resources)
      case 4: try decoder.decodeRepeatedStringField(value: &self.resourceNames)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.verbs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.verbs, fieldNumber: 1)
    }
    if !self.apiGroups.isEmpty {
      try visitor.visitRepeatedStringField(value: self.apiGroups, fieldNumber: 2)
    }
    if !self.resources.isEmpty {
      try visitor.visitRepeatedStringField(value: self.resources, fieldNumber: 3)
    }
    if !self.resourceNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.resourceNames, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_ResourceRule, rhs: K8s_Io_Api_Authorization_V1beta1_ResourceRule) -> Bool {
    if lhs.verbs != rhs.verbs {return false}
    if lhs.apiGroups != rhs.apiGroups {return false}
    if lhs.resources != rhs.resources {return false}
    if lhs.resourceNames != rhs.resourceNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SelfSubjectAccessReview"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "spec"),
    3: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _spec: K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReviewSpec? = nil
    var _status: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._status)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReview, rhs: K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReview) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReviewSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SelfSubjectAccessReviewSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resourceAttributes"),
    2: .same(proto: "nonResourceAttributes"),
  ]

  fileprivate class _StorageClass {
    var _resourceAttributes: K8s_Io_Api_Authorization_V1beta1_ResourceAttributes? = nil
    var _nonResourceAttributes: K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _resourceAttributes = source._resourceAttributes
      _nonResourceAttributes = source._nonResourceAttributes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._resourceAttributes)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._nonResourceAttributes)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._resourceAttributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._nonResourceAttributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReviewSpec, rhs: K8s_Io_Api_Authorization_V1beta1_SelfSubjectAccessReviewSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._resourceAttributes != rhs_storage._resourceAttributes {return false}
        if _storage._nonResourceAttributes != rhs_storage._nonResourceAttributes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SelfSubjectRulesReview"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "spec"),
    3: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _spec: K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReviewSpec? = nil
    var _status: K8s_Io_Api_Authorization_V1beta1_SubjectRulesReviewStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._status)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReview, rhs: K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReview) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReviewSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SelfSubjectRulesReviewSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "namespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._namespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._namespace {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReviewSpec, rhs: K8s_Io_Api_Authorization_V1beta1_SelfSubjectRulesReviewSpec) -> Bool {
    if lhs._namespace != rhs._namespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_SubjectAccessReview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubjectAccessReview"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "spec"),
    3: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _spec: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec? = nil
    var _status: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._status)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReview, rhs: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReview) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubjectAccessReviewSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resourceAttributes"),
    2: .same(proto: "nonResourceAttributes"),
    3: .same(proto: "user"),
    4: .same(proto: "group"),
    5: .same(proto: "extra"),
    6: .same(proto: "uid"),
  ]

  fileprivate class _StorageClass {
    var _resourceAttributes: K8s_Io_Api_Authorization_V1beta1_ResourceAttributes? = nil
    var _nonResourceAttributes: K8s_Io_Api_Authorization_V1beta1_NonResourceAttributes? = nil
    var _user: String? = nil
    var _group: [String] = []
    var _extra: Dictionary<String,K8s_Io_Api_Authorization_V1beta1_ExtraValue> = [:]
    var _uid: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _resourceAttributes = source._resourceAttributes
      _nonResourceAttributes = source._nonResourceAttributes
      _user = source._user
      _group = source._group
      _extra = source._extra
      _uid = source._uid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._resourceAttributes)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._nonResourceAttributes)
        case 3: try decoder.decodeSingularStringField(value: &_storage._user)
        case 4: try decoder.decodeRepeatedStringField(value: &_storage._group)
        case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,K8s_Io_Api_Authorization_V1beta1_ExtraValue>.self, value: &_storage._extra)
        case 6: try decoder.decodeSingularStringField(value: &_storage._uid)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._resourceAttributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._nonResourceAttributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._user {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if !_storage._group.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._group, fieldNumber: 4)
      }
      if !_storage._extra.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,K8s_Io_Api_Authorization_V1beta1_ExtraValue>.self, value: _storage._extra, fieldNumber: 5)
      }
      if let v = _storage._uid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec, rhs: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._resourceAttributes != rhs_storage._resourceAttributes {return false}
        if _storage._nonResourceAttributes != rhs_storage._nonResourceAttributes {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._group != rhs_storage._group {return false}
        if _storage._extra != rhs_storage._extra {return false}
        if _storage._uid != rhs_storage._uid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubjectAccessReviewStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "allowed"),
    4: .same(proto: "denied"),
    2: .same(proto: "reason"),
    3: .same(proto: "evaluationError"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._allowed)
      case 2: try decoder.decodeSingularStringField(value: &self._reason)
      case 3: try decoder.decodeSingularStringField(value: &self._evaluationError)
      case 4: try decoder.decodeSingularBoolField(value: &self._denied)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._allowed {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._reason {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._evaluationError {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._denied {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus, rhs: K8s_Io_Api_Authorization_V1beta1_SubjectAccessReviewStatus) -> Bool {
    if lhs._allowed != rhs._allowed {return false}
    if lhs._denied != rhs._denied {return false}
    if lhs._reason != rhs._reason {return false}
    if lhs._evaluationError != rhs._evaluationError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Authorization_V1beta1_SubjectRulesReviewStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubjectRulesReviewStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resourceRules"),
    2: .same(proto: "nonResourceRules"),
    3: .same(proto: "incomplete"),
    4: .same(proto: "evaluationError"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.resourceRules)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.nonResourceRules)
      case 3: try decoder.decodeSingularBoolField(value: &self._incomplete)
      case 4: try decoder.decodeSingularStringField(value: &self._evaluationError)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resourceRules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.resourceRules, fieldNumber: 1)
    }
    if !self.nonResourceRules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nonResourceRules, fieldNumber: 2)
    }
    if let v = self._incomplete {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._evaluationError {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Authorization_V1beta1_SubjectRulesReviewStatus, rhs: K8s_Io_Api_Authorization_V1beta1_SubjectRulesReviewStatus) -> Bool {
    if lhs.resourceRules != rhs.resourceRules {return false}
    if lhs.nonResourceRules != rhs.nonResourceRules {return false}
    if lhs._incomplete != rhs._incomplete {return false}
    if lhs._evaluationError != rhs._evaluationError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
