// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: k8s.io/api/storage/v1beta1/generated.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// CSIDriver captures information about a Container Storage Interface (CSI)
/// volume driver deployed on the cluster.
/// CSI drivers do not need to create the CSIDriver object directly. Instead they may use the
/// cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically
/// creates a CSIDriver object representing the driver.
/// Kubernetes attach detach controller uses this object to determine whether attach is required.
/// Kubelet uses this object to determine whether pod information needs to be passed on mount.
/// CSIDriver objects are non-namespaced.
struct K8s_Io_Api_Storage_V1beta1_CSIDriver {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard object metadata.
  /// metadata.Name indicates the name of the CSI driver that this object
  /// refers to; it MUST be the same name returned by the CSI GetPluginName()
  /// call for that driver.
  /// The driver name must be 63 characters or less, beginning and ending with
  /// an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and
  /// alphanumerics between.
  /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Specification of the CSI Driver.
  var spec: K8s_Io_Api_Storage_V1beta1_CSIDriverSpec {
    get {return _storage._spec ?? K8s_Io_Api_Storage_V1beta1_CSIDriverSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CSIDriverList is a collection of CSIDriver objects.
struct K8s_Io_Api_Storage_V1beta1_CSIDriverList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard list metadata
  /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// items is the list of CSIDriver
  var items: [K8s_Io_Api_Storage_V1beta1_CSIDriver] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CSIDriverSpec is the specification of a CSIDriver.
struct K8s_Io_Api_Storage_V1beta1_CSIDriverSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// attachRequired indicates this CSI volume driver requires an attach
  /// operation (because it implements the CSI ControllerPublishVolume()
  /// method), and that the Kubernetes attach detach controller should call
  /// the attach volume interface which checks the volumeattachment status
  /// and waits until the volume is attached before proceeding to mounting.
  /// The CSI external-attacher coordinates with CSI volume driver and updates
  /// the volumeattachment status when the attach operation is complete.
  /// If the CSIDriverRegistry feature gate is enabled and the value is
  /// specified to false, the attach operation will be skipped.
  /// Otherwise the attach operation will be called.
  /// +optional
  var attachRequired: Bool {
    get {return _attachRequired ?? false}
    set {_attachRequired = newValue}
  }
  /// Returns true if `attachRequired` has been explicitly set.
  var hasAttachRequired: Bool {return self._attachRequired != nil}
  /// Clears the value of `attachRequired`. Subsequent reads from it will return its default value.
  mutating func clearAttachRequired() {self._attachRequired = nil}

  /// If set to true, podInfoOnMount indicates this CSI volume driver
  /// requires additional pod information (like podName, podUID, etc.) during
  /// mount operations.
  /// If set to false, pod information will not be passed on mount.
  /// Default is false.
  /// The CSI driver specifies podInfoOnMount as part of driver deployment.
  /// If true, Kubelet will pass pod information as VolumeContext in the CSI
  /// NodePublishVolume() calls.
  /// The CSI driver is responsible for parsing and validating the information
  /// passed in as VolumeContext.
  /// The following VolumeConext will be passed if podInfoOnMount is set to true.
  /// This list might grow, but the prefix will be used.
  /// "csi.storage.k8s.io/pod.name": pod.Name
  /// "csi.storage.k8s.io/pod.namespace": pod.Namespace
  /// "csi.storage.k8s.io/pod.uid": string(pod.UID)
  /// "csi.storage.k8s.io/ephemeral": "true" iff the volume is an ephemeral inline volume
  ///                                 defined by a CSIVolumeSource, otherwise "false"
  ///
  /// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only
  /// required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode.
  /// Other drivers can leave pod info disabled and/or ignore this field.
  /// As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when
  /// deployed on such a cluster and the deployment determines which mode that is, for example
  /// via a command line parameter of the driver.
  /// +optional
  var podInfoOnMount: Bool {
    get {return _podInfoOnMount ?? false}
    set {_podInfoOnMount = newValue}
  }
  /// Returns true if `podInfoOnMount` has been explicitly set.
  var hasPodInfoOnMount: Bool {return self._podInfoOnMount != nil}
  /// Clears the value of `podInfoOnMount`. Subsequent reads from it will return its default value.
  mutating func clearPodInfoOnMount() {self._podInfoOnMount = nil}

  /// VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports.
  /// The default if the list is empty is "Persistent", which is the usage
  /// defined by the CSI specification and implemented in Kubernetes via the usual
  /// PV/PVC mechanism.
  /// The other mode is "Ephemeral". In this mode, volumes are defined inline
  /// inside the pod spec with CSIVolumeSource and their lifecycle is tied to
  /// the lifecycle of that pod. A driver has to be aware of this
  /// because it is only going to get a NodePublishVolume call for such a volume.
  /// For more information about implementing this mode, see
  /// https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html
  /// A driver can support one or more of these modes and
  /// more modes may be added in the future.
  /// +optional
  var volumeLifecycleModes: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _attachRequired: Bool? = nil
  fileprivate var _podInfoOnMount: Bool? = nil
}

/// DEPRECATED - This group version of CSINode is deprecated by storage/v1/CSINode.
/// See the release notes for more information.
/// CSINode holds information about all CSI drivers installed on a node.
/// CSI drivers do not need to create the CSINode object directly. As long as
/// they use the node-driver-registrar sidecar container, the kubelet will
/// automatically populate the CSINode object for the CSI driver as part of
/// kubelet plugin registration.
/// CSINode has the same name as a node. If the object is missing, it means either
/// there are no CSI Drivers available on the node, or the Kubelet version is low
/// enough that it doesn't create this object.
/// CSINode has an OwnerReference that points to the corresponding node object.
struct K8s_Io_Api_Storage_V1beta1_CSINode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// metadata.name must be the Kubernetes node name.
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// spec is the specification of CSINode
  var spec: K8s_Io_Api_Storage_V1beta1_CSINodeSpec {
    get {return _storage._spec ?? K8s_Io_Api_Storage_V1beta1_CSINodeSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CSINodeDriver holds information about the specification of one CSI driver installed on a node
struct K8s_Io_Api_Storage_V1beta1_CSINodeDriver {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This is the name of the CSI driver that this object refers to.
  /// This MUST be the same name returned by the CSI GetPluginName() call for
  /// that driver.
  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  /// nodeID of the node from the driver point of view.
  /// This field enables Kubernetes to communicate with storage systems that do
  /// not share the same nomenclature for nodes. For example, Kubernetes may
  /// refer to a given node as "node1", but the storage system may refer to
  /// the same node as "nodeA". When Kubernetes issues a command to the storage
  /// system to attach a volume to a specific node, it can use this field to
  /// refer to the node name using the ID that the storage system will
  /// understand, e.g. "nodeA" instead of "node1". This field is required.
  var nodeID: String {
    get {return _storage._nodeID ?? String()}
    set {_uniqueStorage()._nodeID = newValue}
  }
  /// Returns true if `nodeID` has been explicitly set.
  var hasNodeID: Bool {return _storage._nodeID != nil}
  /// Clears the value of `nodeID`. Subsequent reads from it will return its default value.
  mutating func clearNodeID() {_uniqueStorage()._nodeID = nil}

  /// topologyKeys is the list of keys supported by the driver.
  /// When a driver is initialized on a cluster, it provides a set of topology
  /// keys that it understands (e.g. "company.com/zone", "company.com/region").
  /// When a driver is initialized on a node, it provides the same topology keys
  /// along with values. Kubelet will expose these topology keys as labels
  /// on its own node object.
  /// When Kubernetes does topology aware provisioning, it can use this list to
  /// determine which labels it should retrieve from the node object and pass
  /// back to the driver.
  /// It is possible for different nodes to use different topology keys.
  /// This can be empty if driver does not support topology.
  /// +optional
  var topologyKeys: [String] {
    get {return _storage._topologyKeys}
    set {_uniqueStorage()._topologyKeys = newValue}
  }

  /// allocatable represents the volume resources of a node that are available for scheduling.
  /// +optional
  var allocatable: K8s_Io_Api_Storage_V1beta1_VolumeNodeResources {
    get {return _storage._allocatable ?? K8s_Io_Api_Storage_V1beta1_VolumeNodeResources()}
    set {_uniqueStorage()._allocatable = newValue}
  }
  /// Returns true if `allocatable` has been explicitly set.
  var hasAllocatable: Bool {return _storage._allocatable != nil}
  /// Clears the value of `allocatable`. Subsequent reads from it will return its default value.
  mutating func clearAllocatable() {_uniqueStorage()._allocatable = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CSINodeList is a collection of CSINode objects.
struct K8s_Io_Api_Storage_V1beta1_CSINodeList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard list metadata
  /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// items is the list of CSINode
  var items: [K8s_Io_Api_Storage_V1beta1_CSINode] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CSINodeSpec holds information about the specification of all CSI drivers installed on a node
struct K8s_Io_Api_Storage_V1beta1_CSINodeSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// drivers is a list of information of all CSI Drivers existing on a node.
  /// If all drivers in the list are uninstalled, this can become empty.
  /// +patchMergeKey=name
  /// +patchStrategy=merge
  var drivers: [K8s_Io_Api_Storage_V1beta1_CSINodeDriver] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// StorageClass describes the parameters for a class of storage for
/// which PersistentVolumes can be dynamically provisioned.
///
/// StorageClasses are non-namespaced; the name of the storage class
/// according to etcd is in ObjectMeta.Name.
struct K8s_Io_Api_Storage_V1beta1_StorageClass {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard object's metadata.
  /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Provisioner indicates the type of the provisioner.
  var provisioner: String {
    get {return _storage._provisioner ?? String()}
    set {_uniqueStorage()._provisioner = newValue}
  }
  /// Returns true if `provisioner` has been explicitly set.
  var hasProvisioner: Bool {return _storage._provisioner != nil}
  /// Clears the value of `provisioner`. Subsequent reads from it will return its default value.
  mutating func clearProvisioner() {_uniqueStorage()._provisioner = nil}

  /// Parameters holds the parameters for the provisioner that should
  /// create volumes of this storage class.
  /// +optional
  var parameters: Dictionary<String,String> {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  /// Dynamically provisioned PersistentVolumes of this storage class are
  /// created with this reclaimPolicy. Defaults to Delete.
  /// +optional
  var reclaimPolicy: String {
    get {return _storage._reclaimPolicy ?? String()}
    set {_uniqueStorage()._reclaimPolicy = newValue}
  }
  /// Returns true if `reclaimPolicy` has been explicitly set.
  var hasReclaimPolicy: Bool {return _storage._reclaimPolicy != nil}
  /// Clears the value of `reclaimPolicy`. Subsequent reads from it will return its default value.
  mutating func clearReclaimPolicy() {_uniqueStorage()._reclaimPolicy = nil}

  /// Dynamically provisioned PersistentVolumes of this storage class are
  /// created with these mountOptions, e.g. ["ro", "soft"]. Not validated -
  /// mount of the PVs will simply fail if one is invalid.
  /// +optional
  var mountOptions: [String] {
    get {return _storage._mountOptions}
    set {_uniqueStorage()._mountOptions = newValue}
  }

  /// AllowVolumeExpansion shows whether the storage class allow volume expand
  /// +optional
  var allowVolumeExpansion: Bool {
    get {return _storage._allowVolumeExpansion ?? false}
    set {_uniqueStorage()._allowVolumeExpansion = newValue}
  }
  /// Returns true if `allowVolumeExpansion` has been explicitly set.
  var hasAllowVolumeExpansion: Bool {return _storage._allowVolumeExpansion != nil}
  /// Clears the value of `allowVolumeExpansion`. Subsequent reads from it will return its default value.
  mutating func clearAllowVolumeExpansion() {_uniqueStorage()._allowVolumeExpansion = nil}

  /// VolumeBindingMode indicates how PersistentVolumeClaims should be
  /// provisioned and bound.  When unset, VolumeBindingImmediate is used.
  /// This field is only honored by servers that enable the VolumeScheduling feature.
  /// +optional
  var volumeBindingMode: String {
    get {return _storage._volumeBindingMode ?? String()}
    set {_uniqueStorage()._volumeBindingMode = newValue}
  }
  /// Returns true if `volumeBindingMode` has been explicitly set.
  var hasVolumeBindingMode: Bool {return _storage._volumeBindingMode != nil}
  /// Clears the value of `volumeBindingMode`. Subsequent reads from it will return its default value.
  mutating func clearVolumeBindingMode() {_uniqueStorage()._volumeBindingMode = nil}

  /// Restrict the node topologies where volumes can be dynamically provisioned.
  /// Each volume plugin defines its own supported topology specifications.
  /// An empty TopologySelectorTerm list means there is no topology restriction.
  /// This field is only honored by servers that enable the VolumeScheduling feature.
  /// +optional
  var allowedTopologies: [K8s_Io_Api_Core_V1_TopologySelectorTerm] {
    get {return _storage._allowedTopologies}
    set {_uniqueStorage()._allowedTopologies = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// StorageClassList is a collection of storage classes.
struct K8s_Io_Api_Storage_V1beta1_StorageClassList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard list metadata
  /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Items is the list of StorageClasses
  var items: [K8s_Io_Api_Storage_V1beta1_StorageClass] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// VolumeAttachment captures the intent to attach or detach the specified volume
/// to/from the specified node.
///
/// VolumeAttachment objects are non-namespaced.
struct K8s_Io_Api_Storage_V1beta1_VolumeAttachment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard object metadata.
  /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Specification of the desired attach/detach volume behavior.
  /// Populated by the Kubernetes system.
  var spec: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSpec {
    get {return _storage._spec ?? K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// Status of the VolumeAttachment request.
  /// Populated by the entity completing the attach or detach
  /// operation, i.e. the external-attacher.
  /// +optional
  var status: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentStatus {
    get {return _storage._status ?? K8s_Io_Api_Storage_V1beta1_VolumeAttachmentStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// VolumeAttachmentList is a collection of VolumeAttachment objects.
struct K8s_Io_Api_Storage_V1beta1_VolumeAttachmentList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard list metadata
  /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  /// +optional
  var metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta {
    get {return _storage._metadata ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  /// Items is the list of VolumeAttachments
  var items: [K8s_Io_Api_Storage_V1beta1_VolumeAttachment] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// VolumeAttachmentSource represents a volume that should be attached.
/// Right now only PersistenVolumes can be attached via external attacher,
/// in future we may allow also inline volumes in pods.
/// Exactly one member can be set.
struct K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the persistent volume to attach.
  /// +optional
  var persistentVolumeName: String {
    get {return _storage._persistentVolumeName ?? String()}
    set {_uniqueStorage()._persistentVolumeName = newValue}
  }
  /// Returns true if `persistentVolumeName` has been explicitly set.
  var hasPersistentVolumeName: Bool {return _storage._persistentVolumeName != nil}
  /// Clears the value of `persistentVolumeName`. Subsequent reads from it will return its default value.
  mutating func clearPersistentVolumeName() {_uniqueStorage()._persistentVolumeName = nil}

  /// inlineVolumeSpec contains all the information necessary to attach
  /// a persistent volume defined by a pod's inline VolumeSource. This field
  /// is populated only for the CSIMigration feature. It contains
  /// translated fields from a pod's inline VolumeSource to a
  /// PersistentVolumeSpec. This field is alpha-level and is only
  /// honored by servers that enabled the CSIMigration feature.
  /// +optional
  var inlineVolumeSpec: K8s_Io_Api_Core_V1_PersistentVolumeSpec {
    get {return _storage._inlineVolumeSpec ?? K8s_Io_Api_Core_V1_PersistentVolumeSpec()}
    set {_uniqueStorage()._inlineVolumeSpec = newValue}
  }
  /// Returns true if `inlineVolumeSpec` has been explicitly set.
  var hasInlineVolumeSpec: Bool {return _storage._inlineVolumeSpec != nil}
  /// Clears the value of `inlineVolumeSpec`. Subsequent reads from it will return its default value.
  mutating func clearInlineVolumeSpec() {_uniqueStorage()._inlineVolumeSpec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
struct K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Attacher indicates the name of the volume driver that MUST handle this
  /// request. This is the name returned by GetPluginName().
  var attacher: String {
    get {return _storage._attacher ?? String()}
    set {_uniqueStorage()._attacher = newValue}
  }
  /// Returns true if `attacher` has been explicitly set.
  var hasAttacher: Bool {return _storage._attacher != nil}
  /// Clears the value of `attacher`. Subsequent reads from it will return its default value.
  mutating func clearAttacher() {_uniqueStorage()._attacher = nil}

  /// Source represents the volume that should be attached.
  var source: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSource {
    get {return _storage._source ?? K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSource()}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  mutating func clearSource() {_uniqueStorage()._source = nil}

  /// The node that the volume should be attached to.
  var nodeName: String {
    get {return _storage._nodeName ?? String()}
    set {_uniqueStorage()._nodeName = newValue}
  }
  /// Returns true if `nodeName` has been explicitly set.
  var hasNodeName: Bool {return _storage._nodeName != nil}
  /// Clears the value of `nodeName`. Subsequent reads from it will return its default value.
  mutating func clearNodeName() {_uniqueStorage()._nodeName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// VolumeAttachmentStatus is the status of a VolumeAttachment request.
struct K8s_Io_Api_Storage_V1beta1_VolumeAttachmentStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates the volume is successfully attached.
  /// This field must only be set by the entity completing the attach
  /// operation, i.e. the external-attacher.
  var attached: Bool {
    get {return _storage._attached ?? false}
    set {_uniqueStorage()._attached = newValue}
  }
  /// Returns true if `attached` has been explicitly set.
  var hasAttached: Bool {return _storage._attached != nil}
  /// Clears the value of `attached`. Subsequent reads from it will return its default value.
  mutating func clearAttached() {_uniqueStorage()._attached = nil}

  /// Upon successful attach, this field is populated with any
  /// information returned by the attach operation that must be passed
  /// into subsequent WaitForAttach or Mount calls.
  /// This field must only be set by the entity completing the attach
  /// operation, i.e. the external-attacher.
  /// +optional
  var attachmentMetadata: Dictionary<String,String> {
    get {return _storage._attachmentMetadata}
    set {_uniqueStorage()._attachmentMetadata = newValue}
  }

  /// The last error encountered during attach operation, if any.
  /// This field must only be set by the entity completing the attach
  /// operation, i.e. the external-attacher.
  /// +optional
  var attachError: K8s_Io_Api_Storage_V1beta1_VolumeError {
    get {return _storage._attachError ?? K8s_Io_Api_Storage_V1beta1_VolumeError()}
    set {_uniqueStorage()._attachError = newValue}
  }
  /// Returns true if `attachError` has been explicitly set.
  var hasAttachError: Bool {return _storage._attachError != nil}
  /// Clears the value of `attachError`. Subsequent reads from it will return its default value.
  mutating func clearAttachError() {_uniqueStorage()._attachError = nil}

  /// The last error encountered during detach operation, if any.
  /// This field must only be set by the entity completing the detach
  /// operation, i.e. the external-attacher.
  /// +optional
  var detachError: K8s_Io_Api_Storage_V1beta1_VolumeError {
    get {return _storage._detachError ?? K8s_Io_Api_Storage_V1beta1_VolumeError()}
    set {_uniqueStorage()._detachError = newValue}
  }
  /// Returns true if `detachError` has been explicitly set.
  var hasDetachError: Bool {return _storage._detachError != nil}
  /// Clears the value of `detachError`. Subsequent reads from it will return its default value.
  mutating func clearDetachError() {_uniqueStorage()._detachError = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// VolumeError captures an error encountered during a volume operation.
struct K8s_Io_Api_Storage_V1beta1_VolumeError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Time the error was encountered.
  /// +optional
  var time: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Time {
    get {return _storage._time ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Time()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  /// String detailing the error encountered during Attach or Detach operation.
  /// This string may be logged, so it should not contain sensitive
  /// information.
  /// +optional
  var message: String {
    get {return _storage._message ?? String()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// VolumeNodeResources is a set of resource limits for scheduling of volumes.
struct K8s_Io_Api_Storage_V1beta1_VolumeNodeResources {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Maximum number of unique volumes managed by the CSI driver that can be used on a node.
  /// A volume that is both attached and mounted on a node is considered to be used once, not twice.
  /// The same rule applies for a unique volume that is shared among multiple pods on the same node.
  /// If this field is nil, then the supported number of volumes on this node is unbounded.
  /// +optional
  var count: Int32 {
    get {return _count ?? 0}
    set {_count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return self._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {self._count = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _count: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "k8s.io.api.storage.v1beta1"

extension K8s_Io_Api_Storage_V1beta1_CSIDriver: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CSIDriver"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "spec"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _spec: K8s_Io_Api_Storage_V1beta1_CSIDriverSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _spec = source._spec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_CSIDriver, rhs: K8s_Io_Api_Storage_V1beta1_CSIDriver) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_CSIDriverList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CSIDriverList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "items"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta? = nil
    var _items: [K8s_Io_Api_Storage_V1beta1_CSIDriver] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _items = source._items
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._items)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_CSIDriverList, rhs: K8s_Io_Api_Storage_V1beta1_CSIDriverList) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._items != rhs_storage._items {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_CSIDriverSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CSIDriverSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attachRequired"),
    2: .same(proto: "podInfoOnMount"),
    3: .same(proto: "volumeLifecycleModes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._attachRequired)
      case 2: try decoder.decodeSingularBoolField(value: &self._podInfoOnMount)
      case 3: try decoder.decodeRepeatedStringField(value: &self.volumeLifecycleModes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._attachRequired {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._podInfoOnMount {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if !self.volumeLifecycleModes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.volumeLifecycleModes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_CSIDriverSpec, rhs: K8s_Io_Api_Storage_V1beta1_CSIDriverSpec) -> Bool {
    if lhs._attachRequired != rhs._attachRequired {return false}
    if lhs._podInfoOnMount != rhs._podInfoOnMount {return false}
    if lhs.volumeLifecycleModes != rhs.volumeLifecycleModes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_CSINode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CSINode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "spec"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _spec: K8s_Io_Api_Storage_V1beta1_CSINodeSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _spec = source._spec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_CSINode, rhs: K8s_Io_Api_Storage_V1beta1_CSINode) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_CSINodeDriver: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CSINodeDriver"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "nodeID"),
    3: .same(proto: "topologyKeys"),
    4: .same(proto: "allocatable"),
  ]

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _nodeID: String? = nil
    var _topologyKeys: [String] = []
    var _allocatable: K8s_Io_Api_Storage_V1beta1_VolumeNodeResources? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _nodeID = source._nodeID
      _topologyKeys = source._topologyKeys
      _allocatable = source._allocatable
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._nodeID)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._topologyKeys)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._allocatable)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._nodeID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if !_storage._topologyKeys.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._topologyKeys, fieldNumber: 3)
      }
      if let v = _storage._allocatable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_CSINodeDriver, rhs: K8s_Io_Api_Storage_V1beta1_CSINodeDriver) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._nodeID != rhs_storage._nodeID {return false}
        if _storage._topologyKeys != rhs_storage._topologyKeys {return false}
        if _storage._allocatable != rhs_storage._allocatable {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_CSINodeList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CSINodeList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "items"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta? = nil
    var _items: [K8s_Io_Api_Storage_V1beta1_CSINode] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _items = source._items
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._items)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_CSINodeList, rhs: K8s_Io_Api_Storage_V1beta1_CSINodeList) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._items != rhs_storage._items {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_CSINodeSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CSINodeSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "drivers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.drivers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.drivers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drivers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_CSINodeSpec, rhs: K8s_Io_Api_Storage_V1beta1_CSINodeSpec) -> Bool {
    if lhs.drivers != rhs.drivers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_StorageClass: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StorageClass"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "provisioner"),
    3: .same(proto: "parameters"),
    4: .same(proto: "reclaimPolicy"),
    5: .same(proto: "mountOptions"),
    6: .same(proto: "allowVolumeExpansion"),
    7: .same(proto: "volumeBindingMode"),
    8: .same(proto: "allowedTopologies"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _provisioner: String? = nil
    var _parameters: Dictionary<String,String> = [:]
    var _reclaimPolicy: String? = nil
    var _mountOptions: [String] = []
    var _allowVolumeExpansion: Bool? = nil
    var _volumeBindingMode: String? = nil
    var _allowedTopologies: [K8s_Io_Api_Core_V1_TopologySelectorTerm] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _provisioner = source._provisioner
      _parameters = source._parameters
      _reclaimPolicy = source._reclaimPolicy
      _mountOptions = source._mountOptions
      _allowVolumeExpansion = source._allowVolumeExpansion
      _volumeBindingMode = source._volumeBindingMode
      _allowedTopologies = source._allowedTopologies
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularStringField(value: &_storage._provisioner)
        case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._parameters)
        case 4: try decoder.decodeSingularStringField(value: &_storage._reclaimPolicy)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._mountOptions)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._allowVolumeExpansion)
        case 7: try decoder.decodeSingularStringField(value: &_storage._volumeBindingMode)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._allowedTopologies)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._provisioner {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if !_storage._parameters.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._parameters, fieldNumber: 3)
      }
      if let v = _storage._reclaimPolicy {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if !_storage._mountOptions.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._mountOptions, fieldNumber: 5)
      }
      if let v = _storage._allowVolumeExpansion {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if let v = _storage._volumeBindingMode {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if !_storage._allowedTopologies.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._allowedTopologies, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_StorageClass, rhs: K8s_Io_Api_Storage_V1beta1_StorageClass) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._provisioner != rhs_storage._provisioner {return false}
        if _storage._parameters != rhs_storage._parameters {return false}
        if _storage._reclaimPolicy != rhs_storage._reclaimPolicy {return false}
        if _storage._mountOptions != rhs_storage._mountOptions {return false}
        if _storage._allowVolumeExpansion != rhs_storage._allowVolumeExpansion {return false}
        if _storage._volumeBindingMode != rhs_storage._volumeBindingMode {return false}
        if _storage._allowedTopologies != rhs_storage._allowedTopologies {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_StorageClassList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StorageClassList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "items"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta? = nil
    var _items: [K8s_Io_Api_Storage_V1beta1_StorageClass] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _items = source._items
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._items)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_StorageClassList, rhs: K8s_Io_Api_Storage_V1beta1_StorageClassList) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._items != rhs_storage._items {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_VolumeAttachment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VolumeAttachment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "spec"),
    3: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ObjectMeta? = nil
    var _spec: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSpec? = nil
    var _status: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _spec = source._spec
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._status)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachment, rhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_VolumeAttachmentList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VolumeAttachmentList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "items"),
  ]

  fileprivate class _StorageClass {
    var _metadata: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_ListMeta? = nil
    var _items: [K8s_Io_Api_Storage_V1beta1_VolumeAttachment] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _metadata = source._metadata
      _items = source._items
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._metadata)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._items)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentList, rhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentList) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._items != rhs_storage._items {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VolumeAttachmentSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "persistentVolumeName"),
    2: .same(proto: "inlineVolumeSpec"),
  ]

  fileprivate class _StorageClass {
    var _persistentVolumeName: String? = nil
    var _inlineVolumeSpec: K8s_Io_Api_Core_V1_PersistentVolumeSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _persistentVolumeName = source._persistentVolumeName
      _inlineVolumeSpec = source._inlineVolumeSpec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._persistentVolumeName)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._inlineVolumeSpec)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._persistentVolumeName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._inlineVolumeSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSource, rhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._persistentVolumeName != rhs_storage._persistentVolumeName {return false}
        if _storage._inlineVolumeSpec != rhs_storage._inlineVolumeSpec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VolumeAttachmentSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attacher"),
    2: .same(proto: "source"),
    3: .same(proto: "nodeName"),
  ]

  fileprivate class _StorageClass {
    var _attacher: String? = nil
    var _source: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSource? = nil
    var _nodeName: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attacher = source._attacher
      _source = source._source
      _nodeName = source._nodeName
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._attacher)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._source)
        case 3: try decoder.decodeSingularStringField(value: &_storage._nodeName)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._attacher {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._source {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._nodeName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSpec, rhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._attacher != rhs_storage._attacher {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._nodeName != rhs_storage._nodeName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_VolumeAttachmentStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VolumeAttachmentStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attached"),
    2: .same(proto: "attachmentMetadata"),
    3: .same(proto: "attachError"),
    4: .same(proto: "detachError"),
  ]

  fileprivate class _StorageClass {
    var _attached: Bool? = nil
    var _attachmentMetadata: Dictionary<String,String> = [:]
    var _attachError: K8s_Io_Api_Storage_V1beta1_VolumeError? = nil
    var _detachError: K8s_Io_Api_Storage_V1beta1_VolumeError? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attached = source._attached
      _attachmentMetadata = source._attachmentMetadata
      _attachError = source._attachError
      _detachError = source._detachError
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._attached)
        case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._attachmentMetadata)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._attachError)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._detachError)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._attached {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      }
      if !_storage._attachmentMetadata.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._attachmentMetadata, fieldNumber: 2)
      }
      if let v = _storage._attachError {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._detachError {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentStatus, rhs: K8s_Io_Api_Storage_V1beta1_VolumeAttachmentStatus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._attached != rhs_storage._attached {return false}
        if _storage._attachmentMetadata != rhs_storage._attachmentMetadata {return false}
        if _storage._attachError != rhs_storage._attachError {return false}
        if _storage._detachError != rhs_storage._detachError {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_VolumeError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VolumeError"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _time: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Time? = nil
    var _message: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _time = source._time
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._time)
        case 2: try decoder.decodeSingularStringField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_VolumeError, rhs: K8s_Io_Api_Storage_V1beta1_VolumeError) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._time != rhs_storage._time {return false}
        if _storage._message != rhs_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Storage_V1beta1_VolumeNodeResources: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VolumeNodeResources"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._count {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Storage_V1beta1_VolumeNodeResources, rhs: K8s_Io_Api_Storage_V1beta1_VolumeNodeResources) -> Bool {
    if lhs._count != rhs._count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
