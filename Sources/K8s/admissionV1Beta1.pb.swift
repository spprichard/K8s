// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: k8s.io/api/admission/v1beta1/generated.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// AdmissionRequest describes the admission.Attributes for the admission request.
struct K8s_Io_Api_Admission_V1beta1_AdmissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// UID is an identifier for the individual request/response. It allows us to distinguish instances of requests which are
  /// otherwise identical (parallel requests, requests when earlier requests did not modify etc)
  /// The UID is meant to track the round trip (request/response) between the KAS and the WebHook, not the user request.
  /// It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
  var uid: String {
    get {return _storage._uid ?? String()}
    set {_uniqueStorage()._uid = newValue}
  }
  /// Returns true if `uid` has been explicitly set.
  var hasUid: Bool {return _storage._uid != nil}
  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
  mutating func clearUid() {_uniqueStorage()._uid = nil}

  /// Kind is the fully-qualified type of object being submitted (for example, v1.Pod or autoscaling.v1.Scale)
  var kind: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionKind {
    get {return _storage._kind ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionKind()}
    set {_uniqueStorage()._kind = newValue}
  }
  /// Returns true if `kind` has been explicitly set.
  var hasKind: Bool {return _storage._kind != nil}
  /// Clears the value of `kind`. Subsequent reads from it will return its default value.
  mutating func clearKind() {_uniqueStorage()._kind = nil}

  /// Resource is the fully-qualified resource being requested (for example, v1.pods)
  var resource: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionResource {
    get {return _storage._resource ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionResource()}
    set {_uniqueStorage()._resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  var hasResource: Bool {return _storage._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  mutating func clearResource() {_uniqueStorage()._resource = nil}

  /// SubResource is the subresource being requested, if any (for example, "status" or "scale")
  /// +optional
  var subResource: String {
    get {return _storage._subResource ?? String()}
    set {_uniqueStorage()._subResource = newValue}
  }
  /// Returns true if `subResource` has been explicitly set.
  var hasSubResource: Bool {return _storage._subResource != nil}
  /// Clears the value of `subResource`. Subsequent reads from it will return its default value.
  mutating func clearSubResource() {_uniqueStorage()._subResource = nil}

  /// RequestKind is the fully-qualified type of the original API request (for example, v1.Pod or autoscaling.v1.Scale).
  /// If this is specified and differs from the value in "kind", an equivalent match and conversion was performed.
  ///
  /// For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of
  /// `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]` and `matchPolicy: Equivalent`,
  /// an API request to apps/v1beta1 deployments would be converted and sent to the webhook
  /// with `kind: {group:"apps", version:"v1", kind:"Deployment"}` (matching the rule the webhook registered for),
  /// and `requestKind: {group:"apps", version:"v1beta1", kind:"Deployment"}` (indicating the kind of the original API request).
  ///
  /// See documentation for the "matchPolicy" field in the webhook configuration type for more details.
  /// +optional
  var requestKind: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionKind {
    get {return _storage._requestKind ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionKind()}
    set {_uniqueStorage()._requestKind = newValue}
  }
  /// Returns true if `requestKind` has been explicitly set.
  var hasRequestKind: Bool {return _storage._requestKind != nil}
  /// Clears the value of `requestKind`. Subsequent reads from it will return its default value.
  mutating func clearRequestKind() {_uniqueStorage()._requestKind = nil}

  /// RequestResource is the fully-qualified resource of the original API request (for example, v1.pods).
  /// If this is specified and differs from the value in "resource", an equivalent match and conversion was performed.
  ///
  /// For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of
  /// `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]` and `matchPolicy: Equivalent`,
  /// an API request to apps/v1beta1 deployments would be converted and sent to the webhook
  /// with `resource: {group:"apps", version:"v1", resource:"deployments"}` (matching the resource the webhook registered for),
  /// and `requestResource: {group:"apps", version:"v1beta1", resource:"deployments"}` (indicating the resource of the original API request).
  ///
  /// See documentation for the "matchPolicy" field in the webhook configuration type.
  /// +optional
  var requestResource: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionResource {
    get {return _storage._requestResource ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionResource()}
    set {_uniqueStorage()._requestResource = newValue}
  }
  /// Returns true if `requestResource` has been explicitly set.
  var hasRequestResource: Bool {return _storage._requestResource != nil}
  /// Clears the value of `requestResource`. Subsequent reads from it will return its default value.
  mutating func clearRequestResource() {_uniqueStorage()._requestResource = nil}

  /// RequestSubResource is the name of the subresource of the original API request, if any (for example, "status" or "scale")
  /// If this is specified and differs from the value in "subResource", an equivalent match and conversion was performed.
  /// See documentation for the "matchPolicy" field in the webhook configuration type.
  /// +optional
  var requestSubResource: String {
    get {return _storage._requestSubResource ?? String()}
    set {_uniqueStorage()._requestSubResource = newValue}
  }
  /// Returns true if `requestSubResource` has been explicitly set.
  var hasRequestSubResource: Bool {return _storage._requestSubResource != nil}
  /// Clears the value of `requestSubResource`. Subsequent reads from it will return its default value.
  mutating func clearRequestSubResource() {_uniqueStorage()._requestSubResource = nil}

  /// Name is the name of the object as presented in the request.  On a CREATE operation, the client may omit name and
  /// rely on the server to generate the name.  If that is the case, this field will contain an empty string.
  /// +optional
  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  /// Namespace is the namespace associated with the request (if any).
  /// +optional
  var namespace: String {
    get {return _storage._namespace ?? String()}
    set {_uniqueStorage()._namespace = newValue}
  }
  /// Returns true if `namespace` has been explicitly set.
  var hasNamespace: Bool {return _storage._namespace != nil}
  /// Clears the value of `namespace`. Subsequent reads from it will return its default value.
  mutating func clearNamespace() {_uniqueStorage()._namespace = nil}

  /// Operation is the operation being performed. This may be different than the operation
  /// requested. e.g. a patch can result in either a CREATE or UPDATE Operation.
  var operation: String {
    get {return _storage._operation ?? String()}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {_uniqueStorage()._operation = nil}

  /// UserInfo is information about the requesting user
  var userInfo: K8s_Io_Api_Authentication_V1_UserInfo {
    get {return _storage._userInfo ?? K8s_Io_Api_Authentication_V1_UserInfo()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  /// Returns true if `userInfo` has been explicitly set.
  var hasUserInfo: Bool {return _storage._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
  mutating func clearUserInfo() {_uniqueStorage()._userInfo = nil}

  /// Object is the object from the incoming request.
  /// +optional
  var object: K8s_Io_Apimachinery_Pkg_Runtime_RawExtension {
    get {return _storage._object ?? K8s_Io_Apimachinery_Pkg_Runtime_RawExtension()}
    set {_uniqueStorage()._object = newValue}
  }
  /// Returns true if `object` has been explicitly set.
  var hasObject: Bool {return _storage._object != nil}
  /// Clears the value of `object`. Subsequent reads from it will return its default value.
  mutating func clearObject() {_uniqueStorage()._object = nil}

  /// OldObject is the existing object. Only populated for DELETE and UPDATE requests.
  /// +optional
  var oldObject: K8s_Io_Apimachinery_Pkg_Runtime_RawExtension {
    get {return _storage._oldObject ?? K8s_Io_Apimachinery_Pkg_Runtime_RawExtension()}
    set {_uniqueStorage()._oldObject = newValue}
  }
  /// Returns true if `oldObject` has been explicitly set.
  var hasOldObject: Bool {return _storage._oldObject != nil}
  /// Clears the value of `oldObject`. Subsequent reads from it will return its default value.
  mutating func clearOldObject() {_uniqueStorage()._oldObject = nil}

  /// DryRun indicates that modifications will definitely not be persisted for this request.
  /// Defaults to false.
  /// +optional
  var dryRun: Bool {
    get {return _storage._dryRun ?? false}
    set {_uniqueStorage()._dryRun = newValue}
  }
  /// Returns true if `dryRun` has been explicitly set.
  var hasDryRun: Bool {return _storage._dryRun != nil}
  /// Clears the value of `dryRun`. Subsequent reads from it will return its default value.
  mutating func clearDryRun() {_uniqueStorage()._dryRun = nil}

  /// Options is the operation option structure of the operation being performed.
  /// e.g. `meta.k8s.io/v1.DeleteOptions` or `meta.k8s.io/v1.CreateOptions`. This may be
  /// different than the options the caller provided. e.g. for a patch request the performed
  /// Operation might be a CREATE, in which case the Options will a
  /// `meta.k8s.io/v1.CreateOptions` even though the caller provided `meta.k8s.io/v1.PatchOptions`.
  /// +optional
  var options: K8s_Io_Apimachinery_Pkg_Runtime_RawExtension {
    get {return _storage._options ?? K8s_Io_Apimachinery_Pkg_Runtime_RawExtension()}
    set {_uniqueStorage()._options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  var hasOptions: Bool {return _storage._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  mutating func clearOptions() {_uniqueStorage()._options = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// AdmissionResponse describes an admission response.
struct K8s_Io_Api_Admission_V1beta1_AdmissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// UID is an identifier for the individual request/response.
  /// This should be copied over from the corresponding AdmissionRequest.
  var uid: String {
    get {return _storage._uid ?? String()}
    set {_uniqueStorage()._uid = newValue}
  }
  /// Returns true if `uid` has been explicitly set.
  var hasUid: Bool {return _storage._uid != nil}
  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
  mutating func clearUid() {_uniqueStorage()._uid = nil}

  /// Allowed indicates whether or not the admission request was permitted.
  var allowed: Bool {
    get {return _storage._allowed ?? false}
    set {_uniqueStorage()._allowed = newValue}
  }
  /// Returns true if `allowed` has been explicitly set.
  var hasAllowed: Bool {return _storage._allowed != nil}
  /// Clears the value of `allowed`. Subsequent reads from it will return its default value.
  mutating func clearAllowed() {_uniqueStorage()._allowed = nil}

  /// Result contains extra details into why an admission request was denied.
  /// This field IS NOT consulted in any way if "Allowed" is "true".
  /// +optional
  var status: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Status {
    get {return _storage._status ?? K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Status()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  /// The patch body. Currently we only support "JSONPatch" which implements RFC 6902.
  /// +optional
  var patch: Data {
    get {return _storage._patch ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._patch = newValue}
  }
  /// Returns true if `patch` has been explicitly set.
  var hasPatch: Bool {return _storage._patch != nil}
  /// Clears the value of `patch`. Subsequent reads from it will return its default value.
  mutating func clearPatch() {_uniqueStorage()._patch = nil}

  /// The type of Patch. Currently we only allow "JSONPatch".
  /// +optional
  var patchType: String {
    get {return _storage._patchType ?? String()}
    set {_uniqueStorage()._patchType = newValue}
  }
  /// Returns true if `patchType` has been explicitly set.
  var hasPatchType: Bool {return _storage._patchType != nil}
  /// Clears the value of `patchType`. Subsequent reads from it will return its default value.
  mutating func clearPatchType() {_uniqueStorage()._patchType = nil}

  /// AuditAnnotations is an unstructured key value map set by remote admission controller (e.g. error=image-blacklisted).
  /// MutatingAdmissionWebhook and ValidatingAdmissionWebhook admission controller will prefix the keys with
  /// admission webhook name (e.g. imagepolicy.example.com/error=image-blacklisted). AuditAnnotations will be provided by
  /// the admission webhook to add additional context to the audit log for this request.
  /// +optional
  var auditAnnotations: Dictionary<String,String> {
    get {return _storage._auditAnnotations}
    set {_uniqueStorage()._auditAnnotations = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// AdmissionReview describes an admission review request/response.
struct K8s_Io_Api_Admission_V1beta1_AdmissionReview {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Request describes the attributes for the admission request.
  /// +optional
  var request: K8s_Io_Api_Admission_V1beta1_AdmissionRequest {
    get {return _storage._request ?? K8s_Io_Api_Admission_V1beta1_AdmissionRequest()}
    set {_uniqueStorage()._request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  var hasRequest: Bool {return _storage._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  mutating func clearRequest() {_uniqueStorage()._request = nil}

  /// Response describes the attributes for the admission response.
  /// +optional
  var response: K8s_Io_Api_Admission_V1beta1_AdmissionResponse {
    get {return _storage._response ?? K8s_Io_Api_Admission_V1beta1_AdmissionResponse()}
    set {_uniqueStorage()._response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return _storage._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {_uniqueStorage()._response = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "k8s.io.api.admission.v1beta1"

extension K8s_Io_Api_Admission_V1beta1_AdmissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdmissionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "kind"),
    3: .same(proto: "resource"),
    4: .same(proto: "subResource"),
    13: .same(proto: "requestKind"),
    14: .same(proto: "requestResource"),
    15: .same(proto: "requestSubResource"),
    5: .same(proto: "name"),
    6: .same(proto: "namespace"),
    7: .same(proto: "operation"),
    8: .same(proto: "userInfo"),
    9: .same(proto: "object"),
    10: .same(proto: "oldObject"),
    11: .same(proto: "dryRun"),
    12: .same(proto: "options"),
  ]

  fileprivate class _StorageClass {
    var _uid: String? = nil
    var _kind: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionKind? = nil
    var _resource: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionResource? = nil
    var _subResource: String? = nil
    var _requestKind: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionKind? = nil
    var _requestResource: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_GroupVersionResource? = nil
    var _requestSubResource: String? = nil
    var _name: String? = nil
    var _namespace: String? = nil
    var _operation: String? = nil
    var _userInfo: K8s_Io_Api_Authentication_V1_UserInfo? = nil
    var _object: K8s_Io_Apimachinery_Pkg_Runtime_RawExtension? = nil
    var _oldObject: K8s_Io_Apimachinery_Pkg_Runtime_RawExtension? = nil
    var _dryRun: Bool? = nil
    var _options: K8s_Io_Apimachinery_Pkg_Runtime_RawExtension? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _kind = source._kind
      _resource = source._resource
      _subResource = source._subResource
      _requestKind = source._requestKind
      _requestResource = source._requestResource
      _requestSubResource = source._requestSubResource
      _name = source._name
      _namespace = source._namespace
      _operation = source._operation
      _userInfo = source._userInfo
      _object = source._object
      _oldObject = source._oldObject
      _dryRun = source._dryRun
      _options = source._options
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uid)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._kind)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._resource)
        case 4: try decoder.decodeSingularStringField(value: &_storage._subResource)
        case 5: try decoder.decodeSingularStringField(value: &_storage._name)
        case 6: try decoder.decodeSingularStringField(value: &_storage._namespace)
        case 7: try decoder.decodeSingularStringField(value: &_storage._operation)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._userInfo)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._object)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._oldObject)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._dryRun)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._options)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._requestKind)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._requestResource)
        case 15: try decoder.decodeSingularStringField(value: &_storage._requestSubResource)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._uid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._kind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._resource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._subResource {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._namespace {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._operation {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._userInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._object {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._oldObject {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._dryRun {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      }
      if let v = _storage._options {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._requestKind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._requestResource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._requestSubResource {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Admission_V1beta1_AdmissionRequest, rhs: K8s_Io_Api_Admission_V1beta1_AdmissionRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._resource != rhs_storage._resource {return false}
        if _storage._subResource != rhs_storage._subResource {return false}
        if _storage._requestKind != rhs_storage._requestKind {return false}
        if _storage._requestResource != rhs_storage._requestResource {return false}
        if _storage._requestSubResource != rhs_storage._requestSubResource {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._namespace != rhs_storage._namespace {return false}
        if _storage._operation != rhs_storage._operation {return false}
        if _storage._userInfo != rhs_storage._userInfo {return false}
        if _storage._object != rhs_storage._object {return false}
        if _storage._oldObject != rhs_storage._oldObject {return false}
        if _storage._dryRun != rhs_storage._dryRun {return false}
        if _storage._options != rhs_storage._options {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Admission_V1beta1_AdmissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdmissionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "allowed"),
    3: .same(proto: "status"),
    4: .same(proto: "patch"),
    5: .same(proto: "patchType"),
    6: .same(proto: "auditAnnotations"),
  ]

  fileprivate class _StorageClass {
    var _uid: String? = nil
    var _allowed: Bool? = nil
    var _status: K8s_Io_Apimachinery_Pkg_Apis_Meta_V1_Status? = nil
    var _patch: Data? = nil
    var _patchType: String? = nil
    var _auditAnnotations: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _allowed = source._allowed
      _status = source._status
      _patch = source._patch
      _patchType = source._patchType
      _auditAnnotations = source._auditAnnotations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uid)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._allowed)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._status)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._patch)
        case 5: try decoder.decodeSingularStringField(value: &_storage._patchType)
        case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._auditAnnotations)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._uid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._allowed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._patch {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
      }
      if let v = _storage._patchType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if !_storage._auditAnnotations.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._auditAnnotations, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Admission_V1beta1_AdmissionResponse, rhs: K8s_Io_Api_Admission_V1beta1_AdmissionResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._allowed != rhs_storage._allowed {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._patch != rhs_storage._patch {return false}
        if _storage._patchType != rhs_storage._patchType {return false}
        if _storage._auditAnnotations != rhs_storage._auditAnnotations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension K8s_Io_Api_Admission_V1beta1_AdmissionReview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdmissionReview"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: K8s_Io_Api_Admission_V1beta1_AdmissionRequest? = nil
    var _response: K8s_Io_Api_Admission_V1beta1_AdmissionResponse? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Api_Admission_V1beta1_AdmissionReview, rhs: K8s_Io_Api_Admission_V1beta1_AdmissionReview) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
