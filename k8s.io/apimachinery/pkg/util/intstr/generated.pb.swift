// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: k8s.io/apimachinery/pkg/util/intstr/generated.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// IntOrString is a type that can hold an int32 or a string.  When used in
/// JSON or YAML marshalling and unmarshalling, it produces or consumes the
/// inner type.  This allows you to have, for example, a JSON field that can
/// accept a name or number.
/// TODO: Rename to Int32OrString
///
/// +protobuf=true
/// +protobuf.options.(gogoproto.goproto_stringer)=false
/// +k8s:openapi-gen=true
struct K8s_Io_Apimachinery_Pkg_Util_Intstr_IntOrString {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Int64 {
    get {return _type ?? 0}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var intVal: Int32 {
    get {return _intVal ?? 0}
    set {_intVal = newValue}
  }
  /// Returns true if `intVal` has been explicitly set.
  var hasIntVal: Bool {return self._intVal != nil}
  /// Clears the value of `intVal`. Subsequent reads from it will return its default value.
  mutating func clearIntVal() {self._intVal = nil}

  var strVal: String {
    get {return _strVal ?? String()}
    set {_strVal = newValue}
  }
  /// Returns true if `strVal` has been explicitly set.
  var hasStrVal: Bool {return self._strVal != nil}
  /// Clears the value of `strVal`. Subsequent reads from it will return its default value.
  mutating func clearStrVal() {self._strVal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: Int64? = nil
  fileprivate var _intVal: Int32? = nil
  fileprivate var _strVal: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "k8s.io.apimachinery.pkg.util.intstr"

extension K8s_Io_Apimachinery_Pkg_Util_Intstr_IntOrString: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IntOrString"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "intVal"),
    3: .same(proto: "strVal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._type)
      case 2: try decoder.decodeSingularInt32Field(value: &self._intVal)
      case 3: try decoder.decodeSingularStringField(value: &self._strVal)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._intVal {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._strVal {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: K8s_Io_Apimachinery_Pkg_Util_Intstr_IntOrString, rhs: K8s_Io_Apimachinery_Pkg_Util_Intstr_IntOrString) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._intVal != rhs._intVal {return false}
    if lhs._strVal != rhs._strVal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
